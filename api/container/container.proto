syntax = "proto3";

package container;

import "google/api/annotations.proto";
import "google/api/field_behavior.proto";
import "validate/validate.proto";
import "openapi/v3/annotations.proto";

option go_package = "github.com/duc-cnzj/mars/api/v4/container;container";

message CopyToPodRequest {
  int64  file_id   = 1 [(validate.rules).int64.gt = 0, (google.api.field_behavior) = REQUIRED];
  string namespace = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 3 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string container = 4 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message CopyToPodResponse {
  string pod_file_path = 1;
  string output        = 2;
  string file_name     = 3;
}

message ExecRequest {
  string          namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string          pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string container = 3;
  repeated string command   = 4 [(validate.rules).repeated = {min_items: 1, items: {string: {min_bytes: 1}}}, (google.api.field_behavior) = REQUIRED];
}

message ExecError {
  int64  code    = 1;
  string message = 2;
}

message ExecResponse {
  string    message = 1;
  ExecError error   = 2;
}

message StreamCopyToPodRequest {
  string file_name = 1 [(validate.rules).string.min_bytes = 1];
  bytes  data      = 2;
  string namespace = 3  [(validate.rules).string.min_bytes = 1];
  string pod       = 4  [(validate.rules).string.min_bytes = 1];
  string container = 5;
}

message StreamCopyToPodResponse {
  int64  size          = 1;
  string pod_file_path = 2;
  string output        = 3;
  string pod           = 4;
  string namespace     = 5;
  string container     = 6;
  string filename      = 7;
}

message IsPodRunningRequest {
  string namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message IsPodRunningResponse {
  bool   running = 1;
  string reason  = 2;
}

message IsPodExistsRequest {
  string namespace = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string pod       = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
}

message IsPodExistsResponse {
  bool exists = 1;
}

message LogRequest {
  string        namespace   = 1 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string        pod         = 2 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  string        container   = 3 [(validate.rules).string.min_bytes = 1, (google.api.field_behavior) = REQUIRED];
  bool show_events = 4;
}

message LogResponse {
  string namespace      = 1;
  string pod_name       = 2;
  string container_name = 3;
  string log            = 4;
}

service Container {
  rpc CopyToPod(CopyToPodRequest) returns (CopyToPodResponse) {
    option (google.api.http)                                               = {
      post: "/api/containers/copy_to_pod",
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "上传文件到 pod",
    };
  }

  // Exec grpc 执行 pod 命令
  rpc Exec(ExecRequest) returns (stream ExecResponse);

  // StreamCopyToPod grpc 上传文件到 pod
  //  demo:
  //  cp, _ := c.Container().StreamCopyToPod(context.TODO())
  //	open, _ := os.Open("/xxxxxx/helm-v3.8.0-rc.1-linux-arm64.tar.gz")
  //	defer open.Close()
  //	bf := bufio.NewReaderSize(open, 1024*1024*5)
  //	var (
  //		filename =  open.Name()
  //		pod = "mars-demo-549f789f7d-sxvqm"
  //		containerName = "demo"
  //		namespace = "devops-a"
  //	)
  //	for {
  //		bts := make([]byte, 1024*1024)
  //		n, err := bf.Read(bts)
  //		if err != nil {
  //			if err == io.EOF {
  //				cp.Send(&container.StreamCopyToPodRequest{
  //					FileName:  filename,
  //					Data:      bts[0:n],
  //					Namespace: namespace,
  //					Pod:       pod,
  //					Container: containerName,
  //				})
  //				recv, err := cp.CloseAndRecv()
  //				if err != nil {
  //					log.Fatal(err)
  //				}
  //				log.Println(recv)
  //			}
  //			return
  //		}
  //		 cp.Send(&container.StreamCopyToPodRequest{
  //			FileName:  filename,
  //			Data:      bts[0:n],
  //			Namespace: namespace,
  //			Pod:       pod,
  //			Container: containerName,
  //		 })
  //	}
  rpc StreamCopyToPod(stream StreamCopyToPodRequest) returns (StreamCopyToPodResponse);

  rpc IsPodRunning(IsPodRunningRequest) returns (IsPodRunningResponse) {
    option (google.api.http)                                               = {
      post: "/api/containers/pod_running_status",
      body: "*"
    };
    option (openapi.v3.operation) = {
      summary: "pod 是否 running",
    };
  }

  rpc IsPodExists(IsPodExistsRequest) returns (IsPodExistsResponse) {
    option (google.api.http)                                               = {
      post: "/api/containers/pod_exists",
      body: "*"
    };

    option (openapi.v3.operation) = {
      summary: "pod 是否存在",
    };
  }

  // ContainerLog 查看 pod 日志
  rpc ContainerLog(LogRequest) returns (LogResponse) {
    option (google.api.http)                                               = {
      get: "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/logs"
    };

    option (openapi.v3.operation) = {
      summary: "查看 pod 日志",
    };
  }

  rpc StreamContainerLog(LogRequest) returns (stream LogResponse) {
    option (google.api.http)                                               = {
      get: "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/stream_logs"
    };

    option (openapi.v3.operation) = {
      summary: "stream 方式查看 pod 日志",
    };
  }
}