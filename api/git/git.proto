syntax = "proto3";

package git;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "mars/mars.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option go_package = "github.com/duc-cnzj/mars/api/v4/git;git";

message EnableProjectRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
}

message DisableProjectRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
}

message ProjectItem {
  int64  id             = 1;
  string name           = 2;
  string path           = 3;
  string web_url        = 4;
  string avatar_url     = 5;
  string description    = 6;
  bool   enabled        = 7;
  bool   global_enabled = 8;
  string display_name   = 9;
}

message AllResponse {
  repeated ProjectItem items = 1;
}

message Option {
  string value        = 1;
  string label        = 2;
  string type         = 3;
  bool   isLeaf       = 4;
  string gitProjectId = 5;
  string branch       = 6;
  string display_name = 7;
}

message ProjectOptionsResponse {
  repeated Option items = 1;
}

message BranchOptionsRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  bool   all            = 2;
}

message BranchOptionsResponse {
  repeated Option items = 1;
}

message CommitOptionsRequest {
  string git_project_id = 1;
  string branch         = 2;
}

message CommitOptionsResponse {
  repeated Option items = 1;
}

message CommitRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch         = 2 [(validate.rules).string.min_bytes = 1];
  string commit         = 3 [(validate.rules).string.min_bytes = 1];
}

message CommitResponse {
  string id              = 1;
  string short_id        = 2;
  string git_project_id  = 3;

  string label           = 4;
  string title           = 5;
  string branch          = 6;
  string author_name     = 7;
  string author_email    = 8;
  string committer_name  = 9;
  string committer_email = 10;
  string web_url         = 11;
  string message         = 12;

  string committed_date  = 13;
  string created_at      = 14;
}

message PipelineInfoRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch         = 2 [(validate.rules).string.min_bytes = 1];
  string commit         = 3 [(validate.rules).string.min_bytes = 1];
}

message PipelineInfoResponse {
  string status  = 1;
  string web_url = 2;
}

message MarsConfigFileRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch         = 2 [(validate.rules).string.min_bytes = 1];
}

message MarsConfigFileResponse {
  string                data     = 1;
  string                type     = 2;
  repeated mars.Element elements = 3;
}

message EnableProjectResponse {}
message DisableProjectResponse {}
message AllRequest {}
message ProjectOptionsRequest {}

service Git {
  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http)                                               = {
      post: "/api/git/projects/enable",
      body: "*"
    };

    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "开启项目，开启后可以在项目列表看到",
    };
  }

  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http)                                               = {
      post: "/api/git/projects/disable",
      body: "*"
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "关闭项目",
    };
  }

  rpc All(AllRequest) returns (AllResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取所有的 git 项目",
    };
  }

  rpc ProjectOptions(ProjectOptionsRequest) returns (ProjectOptionsResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/project_options",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取项目信息， 用在级联列表",
    };
  }

  rpc BranchOptions(BranchOptionsRequest) returns (BranchOptionsResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects/{git_project_id}/branch_options",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取分支信息， 用在级联列表",
    };
  }

  rpc CommitOptions(CommitOptionsRequest) returns (CommitOptionsResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commit_options",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取commit信息， 用在级联列表",
    };
  }

  rpc Commit(CommitRequest) returns (CommitResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commits/{commit}",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取 commit 详情",
    };
  }

  rpc PipelineInfo(PipelineInfoRequest) returns (PipelineInfoResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commits/{commit}/pipeline_info",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取 pipeline 详情",
    };
  }

  rpc MarsConfigFile(MarsConfigFileRequest) returns (MarsConfigFileResponse) {
    option (google.api.http)                                               = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/config_file",
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      summary: "获取项目 mars 配置详情",
    };
  }
}
