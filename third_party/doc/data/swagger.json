{
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "swagger": "2.0",
  "info": {
    "title": "mars api docs",
    "version": "version not set"
  },
  "paths": {
    "/api/auth/exchange": {
      "post": {
        "tags": [
          "Auth"
        ],
        "operationId": "Auth_Exchange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthExchangeRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthExchangeResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/auth/info": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "Auth_Info",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/auth/login": {
      "post": {
        "security": [],
        "tags": [
          "Auth"
        ],
        "operationId": "Auth_Login",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/AuthLoginRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthLoginResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/auth/settings": {
      "get": {
        "tags": [
          "Auth"
        ],
        "operationId": "Auth_Settings",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/AuthSettingsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/cluster_info": {
      "get": {
        "security": [],
        "tags": [
          "Cluster"
        ],
        "operationId": "Cluster_ClusterInfo",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ClusterInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/container_copy/copy_to_pod": {
      "post": {
        "tags": [
          "ContainerCopy"
        ],
        "operationId": "ContainerCopy_CopyToPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/CopyToPodRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/CopyToPodResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/events": {
      "get": {
        "tags": [
          "Event"
        ],
        "operationId": "Event_List",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "page",
            "in": "query"
          },
          {
            "type": "string",
            "format": "int64",
            "name": "page_size",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/EventListResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitlab/projects/{project_id}/default_values": {
      "get": {
        "tags": [
          "Mars"
        ],
        "operationId": "Mars_GetDefaultChartValues",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MarsDefaultChartValuesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitlab/projects/{project_id}/global_config": {
      "get": {
        "tags": [
          "Mars"
        ],
        "operationId": "Mars_GlobalConfig",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MarsGlobalConfigResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitlab/projects/{project_id}/mars_config": {
      "get": {
        "tags": [
          "Mars"
        ],
        "operationId": "Mars_Show",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MarsShowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Mars"
        ],
        "operationId": "Mars_Update",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "config": {
                  "$ref": "#/definitions/MarsConfig"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MarsUpdateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitlab/projects/{project_id}/toggle_enabled": {
      "post": {
        "tags": [
          "Mars"
        ],
        "operationId": "Mars_ToggleEnabled",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "type": "object",
              "properties": {
                "enabled": {
                  "type": "boolean"
                }
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MarsToggleEnabledResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/project_options": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_ProjectOptions",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitProjectOptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_All",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitAllProjectsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/disable": {
      "post": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_DisableProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GitDisableProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitDisableProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/enable": {
      "post": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_EnableProject",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/GitEnableProjectRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitEnableProjectResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/{project_id}/branch_options": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_BranchOptions",
        "parameters": [
          {
            "type": "string",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "all",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitBranchOptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/{project_id}/branches/{branch}/commit_options": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_CommitOptions",
        "parameters": [
          {
            "type": "string",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitCommitOptionsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/{project_id}/branches/{branch}/commits/{commit}": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_Commit",
        "parameters": [
          {
            "type": "string",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "commit",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitCommitResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/{project_id}/branches/{branch}/commits/{commit}/pipeline_info": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_PipelineInfo",
        "parameters": [
          {
            "type": "string",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "commit",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitPipelineInfoResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/gitserver/projects/{project_id}/branches/{branch}/config_file": {
      "get": {
        "tags": [
          "GitServer"
        ],
        "operationId": "GitServer_MarsConfigFile",
        "parameters": [
          {
            "type": "string",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "branch",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/GitConfigFileResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/metrics/namespace/{namespace}/pods/{pod}": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "Metrics_Show",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/MetricsShowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/metrics/namespace/{namespace}/pods/{pod}/stream": {
      "get": {
        "tags": [
          "Metrics"
        ],
        "operationId": "Metrics_StreamShow",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "title": "Stream result of MetricsShowResponse",
              "properties": {
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                },
                "result": {
                  "$ref": "#/definitions/MetricsShowResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces": {
      "get": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_All",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceAllResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_Create",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/NamespaceCreateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceCreateResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces/exists": {
      "post": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_IsExists",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceIsExistsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace_id}": {
      "get": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_Show",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "namespace_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceShowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_Delete",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "namespace_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace_id}/cpu_memory": {
      "get": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_CpuMemory",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "namespace_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceCpuMemoryResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace_id}/service_endpoints": {
      "get": {
        "tags": [
          "Namespace"
        ],
        "operationId": "Namespace_ServiceEndpoints",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "namespace_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "project_name",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/NamespaceServiceEndpointsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/namespaces/{namespace}/pod/{pod}/status": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_IsPodRunning",
        "parameters": [
          {
            "type": "string",
            "name": "namespace",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "pod",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectIsPodRunningResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/picture/background": {
      "get": {
        "security": [],
        "tags": [
          "Picture"
        ],
        "operationId": "Picture_Background",
        "parameters": [
          {
            "type": "boolean",
            "name": "random",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/BackgroundResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/projects/{project_id}": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_Show",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectShowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_Delete",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectDeleteResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/changelogs": {
      "get": {
        "tags": [
          "Changelog"
        ],
        "operationId": "Changelog_Show",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "boolean",
            "name": "only_changed",
            "in": "query"
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ChangelogShowResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/containers": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_AllPodContainers",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectAllPodContainersResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/pods/{pod}/containers/{container}/logs": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_PodContainerLog",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/ProjectPodContainerLogResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/projects/{project_id}/pods/{pod}/containers/{container}/stream_logs": {
      "get": {
        "tags": [
          "Project"
        ],
        "operationId": "Project_StreamPodContainerLog",
        "parameters": [
          {
            "type": "string",
            "format": "int64",
            "name": "project_id",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "pod",
            "in": "path",
            "required": true
          },
          {
            "type": "string",
            "name": "container",
            "in": "path",
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response.(streaming responses)",
            "schema": {
              "type": "object",
              "title": "Stream result of ProjectPodContainerLogResponse",
              "properties": {
                "error": {
                  "$ref": "#/definitions/rpcStatus"
                },
                "result": {
                  "$ref": "#/definitions/ProjectPodContainerLogResponse"
                }
              }
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    },
    "/api/version": {
      "get": {
        "security": [],
        "tags": [
          "Version"
        ],
        "operationId": "Version_Version",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/VersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/rpcStatus"
            }
          }
        }
      }
    }
  },
  "definitions": {
    "ActionType": {
      "type": "string",
      "default": "Unknown",
      "enum": [
        "Unknown",
        "Create",
        "Update",
        "Delete"
      ]
    },
    "AuthExchangeRequest": {
      "type": "object",
      "properties": {
        "code": {
          "type": "string"
        }
      }
    },
    "AuthExchangeResponse": {
      "type": "object",
      "properties": {
        "expires_in": {
          "type": "string",
          "format": "int64"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "AuthInfoResponse": {
      "type": "object",
      "properties": {
        "avatar": {
          "type": "string"
        },
        "email": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "logout_url": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "AuthLoginRequest": {
      "type": "object",
      "properties": {
        "password": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "AuthLoginResponse": {
      "type": "object",
      "properties": {
        "expires_in": {
          "type": "string",
          "format": "int64"
        },
        "token": {
          "type": "string"
        }
      }
    },
    "AuthSettingsResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/AuthSettingsResponseOidcSetting"
          }
        }
      }
    },
    "AuthSettingsResponseOidcSetting": {
      "type": "object",
      "properties": {
        "enabled": {
          "type": "boolean"
        },
        "end_session_endpoint": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "BackgroundResponse": {
      "type": "object",
      "properties": {
        "copyright": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "ChangelogShowItem": {
      "type": "object",
      "properties": {
        "config": {
          "type": "string"
        },
        "date": {
          "type": "string"
        },
        "username": {
          "type": "string"
        },
        "version": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "ChangelogShowResponse": {
      "type": "object",
      "properties": {
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangelogShowItem"
          }
        }
      }
    },
    "ClusterInfoResponse": {
      "type": "object",
      "properties": {
        "free_cpu": {
          "type": "string"
        },
        "free_memory": {
          "type": "string"
        },
        "free_request_cpu": {
          "type": "string"
        },
        "free_request_memory": {
          "type": "string"
        },
        "request_cpu_rate": {
          "type": "string"
        },
        "request_memory_rate": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "total_cpu": {
          "type": "string"
        },
        "total_memory": {
          "type": "string"
        },
        "usage_cpu_rate": {
          "type": "string"
        },
        "usage_memory_rate": {
          "type": "string"
        }
      }
    },
    "CopyToPodRequest": {
      "type": "object",
      "properties": {
        "container": {
          "type": "string"
        },
        "file_id": {
          "type": "string",
          "format": "int64"
        },
        "namespace": {
          "type": "string"
        },
        "pod": {
          "type": "string"
        }
      }
    },
    "CopyToPodResponse": {
      "type": "object",
      "properties": {
        "output": {
          "type": "string"
        },
        "podFilePath": {
          "type": "string"
        }
      }
    },
    "EventListItem": {
      "type": "object",
      "properties": {
        "action": {
          "$ref": "#/definitions/ActionType"
        },
        "event_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "message": {
          "type": "string"
        },
        "new": {
          "type": "string"
        },
        "old": {
          "type": "string"
        },
        "username": {
          "type": "string"
        }
      }
    },
    "EventListResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "items": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EventListItem"
          }
        },
        "page": {
          "type": "string",
          "format": "int64"
        },
        "page_size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "GitAllProjectsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitProjectItem"
          }
        }
      }
    },
    "GitBranchOptionsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitOption"
          }
        }
      }
    },
    "GitCommitOptionsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitOption"
          }
        }
      }
    },
    "GitCommitResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/GitOption"
        }
      }
    },
    "GitConfigFileResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "GitDisableProjectRequest": {
      "type": "object",
      "properties": {
        "git_project_id": {
          "type": "string"
        }
      }
    },
    "GitDisableProjectResponse": {
      "type": "object"
    },
    "GitEnableProjectRequest": {
      "type": "object",
      "properties": {
        "git_project_id": {
          "type": "string"
        }
      }
    },
    "GitEnableProjectResponse": {
      "type": "object"
    },
    "GitOption": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "isLeaf": {
          "type": "boolean",
          "title": "isLeaf 兼容 antd"
        },
        "label": {
          "type": "string"
        },
        "projectId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      }
    },
    "GitPipelineInfoResponse": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      }
    },
    "GitProjectItem": {
      "type": "object",
      "properties": {
        "avatar_url": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "enabled": {
          "type": "boolean"
        },
        "global_enabled": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "web_url": {
          "type": "string"
        }
      }
    },
    "GitProjectOptionsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/GitOption"
          }
        }
      }
    },
    "MarsConfig": {
      "type": "object",
      "properties": {
        "branches": {
          "type": "array",
          "title": "branches 启用的分支",
          "items": {
            "type": "string"
          }
        },
        "config_field": {
          "type": "string"
        },
        "config_file": {
          "type": "string",
          "title": "config_file 指定项目下的默认配置文件, 也可以是别的项目的文件，格式为 \"pid|branch|filename\""
        },
        "config_file_type": {
          "description": "config_file_type 配置文件类型，php/env/yaml...",
          "type": "string"
        },
        "config_file_values": {
          "type": "string",
          "title": "config_file_values 全局配置文件，如果没有 ConfigFile 则使用这个"
        },
        "is_simple_env": {
          "type": "boolean"
        },
        "local_chart_path": {
          "type": "string",
          "title": "local_chart_path helm charts 目录, charts 文件在项目中存放的目录(必填), 也可以是别的项目的文件，格式为 \"pid|branch|path\""
        },
        "values_yaml": {
          "type": "string",
          "title": "values_yaml 和 values.yaml 一样"
        }
      }
    },
    "MarsDefaultChartValuesResponse": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "MarsGlobalConfigResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MarsConfig"
        },
        "enabled": {
          "type": "boolean"
        }
      }
    },
    "MarsShowResponse": {
      "type": "object",
      "properties": {
        "branch": {
          "type": "string"
        },
        "config": {
          "$ref": "#/definitions/MarsConfig"
        }
      }
    },
    "MarsToggleEnabledResponse": {
      "type": "object"
    },
    "MarsUpdateResponse": {
      "type": "object",
      "properties": {
        "config": {
          "$ref": "#/definitions/MarsConfig"
        }
      }
    },
    "Metadata": {
      "type": "object",
      "properties": {
        "data": {
          "type": "string"
        },
        "end": {
          "type": "boolean"
        },
        "id": {
          "type": "string"
        },
        "result": {
          "$ref": "#/definitions/ResultType"
        },
        "slug": {
          "type": "string"
        },
        "to": {
          "$ref": "#/definitions/To"
        },
        "type": {
          "$ref": "#/definitions/Type"
        },
        "uid": {
          "type": "string"
        }
      }
    },
    "MetricsShowResponse": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "number",
          "format": "double"
        },
        "humanize_cpu": {
          "type": "string"
        },
        "humanize_memory": {
          "type": "string"
        },
        "length": {
          "type": "string",
          "format": "int64"
        },
        "memory": {
          "type": "number",
          "format": "double"
        },
        "time": {
          "type": "string"
        }
      }
    },
    "NamespaceAllResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamespaceItem"
          }
        }
      }
    },
    "NamespaceCpuMemoryResponse": {
      "type": "object",
      "properties": {
        "cpu": {
          "type": "string"
        },
        "memory": {
          "type": "string"
        }
      }
    },
    "NamespaceCreateRequest": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string"
        }
      }
    },
    "NamespaceCreateResponse": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "image_pull_secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "NamespaceDeleteResponse": {
      "type": "object"
    },
    "NamespaceIsExistsResponse": {
      "type": "object",
      "properties": {
        "exists": {
          "type": "boolean"
        },
        "id": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "NamespaceItem": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamespaceSimpleProject"
          }
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "NamespaceModel": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "image_pull_secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectModel"
          }
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "NamespaceServiceEndpointsResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/NamespaceServiceEndpointsResponseitem"
          }
        }
      }
    },
    "NamespaceServiceEndpointsResponseitem": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "url": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "NamespaceShowResponse": {
      "type": "object",
      "properties": {
        "created_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "image_pull_secrets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "projects": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectModel"
          }
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "NamespaceSimpleProject": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "ProjectAllPodContainersResponse": {
      "type": "object",
      "properties": {
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectPodLog"
          }
        }
      }
    },
    "ProjectApplyResponse": {
      "type": "object",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/Metadata"
        },
        "project": {
          "$ref": "#/definitions/ProjectModel"
        }
      }
    },
    "ProjectDeleteResponse": {
      "type": "object"
    },
    "ProjectIsPodRunningResponse": {
      "type": "object",
      "properties": {
        "reason": {
          "type": "string"
        },
        "running": {
          "type": "boolean"
        }
      }
    },
    "ProjectListResponse": {
      "type": "object",
      "properties": {
        "count": {
          "type": "string",
          "format": "int64"
        },
        "data": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ProjectModel"
          }
        },
        "page": {
          "type": "string",
          "format": "int64"
        },
        "page_size": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "ProjectModel": {
      "type": "object",
      "properties": {
        "atomic": {
          "type": "boolean"
        },
        "config": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "docker_image": {
          "type": "string"
        },
        "gitlab_branch": {
          "type": "string"
        },
        "gitlab_commit": {
          "type": "string"
        },
        "gitlab_project_id": {
          "type": "string",
          "format": "int64"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/NamespaceModel"
        },
        "namespace_id": {
          "type": "string",
          "format": "int64"
        },
        "override_values": {
          "type": "string"
        },
        "pod_selectors": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        }
      }
    },
    "ProjectPodContainerLogResponse": {
      "type": "object",
      "properties": {
        "data": {
          "$ref": "#/definitions/ProjectPodLog"
        }
      }
    },
    "ProjectPodLog": {
      "type": "object",
      "properties": {
        "container_name": {
          "type": "string"
        },
        "log": {
          "type": "string"
        },
        "namespace": {
          "type": "string"
        },
        "pod_name": {
          "type": "string"
        }
      }
    },
    "ProjectShowResponse": {
      "type": "object",
      "properties": {
        "atomic": {
          "type": "boolean"
        },
        "config": {
          "type": "string"
        },
        "cpu": {
          "type": "string"
        },
        "created_at": {
          "type": "string"
        },
        "docker_image": {
          "type": "string"
        },
        "gitlab_branch": {
          "type": "string"
        },
        "gitlab_commit": {
          "type": "string"
        },
        "gitlab_commit_author": {
          "type": "string"
        },
        "gitlab_commit_date": {
          "type": "string"
        },
        "gitlab_commit_title": {
          "type": "string"
        },
        "gitlab_commit_web_url": {
          "type": "string"
        },
        "gitlab_project_id": {
          "type": "string",
          "format": "int64"
        },
        "humanize_created_at": {
          "type": "string"
        },
        "humanize_updated_at": {
          "type": "string"
        },
        "id": {
          "type": "string",
          "format": "int64"
        },
        "memory": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "namespace": {
          "$ref": "#/definitions/ProjectShowResponseNamespace"
        },
        "override_values": {
          "type": "string"
        },
        "updated_at": {
          "type": "string"
        },
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ProjectShowResponseNamespace": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "format": "int64"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "ResultType": {
      "type": "string",
      "default": "ResultUnknown",
      "enum": [
        "ResultUnknown",
        "Error",
        "Success",
        "Deployed",
        "DeployedFailed",
        "DeployedCanceled"
      ]
    },
    "To": {
      "type": "string",
      "default": "ToSelf",
      "enum": [
        "ToSelf",
        "ToAll",
        "ToOthers"
      ]
    },
    "Type": {
      "type": "string",
      "default": "TypeUnknown",
      "enum": [
        "TypeUnknown",
        "SetUid",
        "ReloadProjects",
        "CancelProject",
        "CreateProject",
        "UpdateProject",
        "ProcessPercent",
        "ClusterInfoSync",
        "InternalError",
        "ApplyProject",
        "HandleExecShell",
        "HandleExecShellMsg",
        "HandleCloseShell",
        "HandleAuthorize"
      ]
    },
    "VersionResponse": {
      "type": "object",
      "properties": {
        "BuildDate": {
          "type": "string"
        },
        "Compiler": {
          "type": "string"
        },
        "GitCommit": {
          "type": "string"
        },
        "GitRepo": {
          "type": "string"
        },
        "GitTag": {
          "type": "string"
        },
        "GoVersion": {
          "type": "string"
        },
        "HelmVersion": {
          "type": "string"
        },
        "KubectlVersion": {
          "type": "string"
        },
        "Platform": {
          "type": "string"
        },
        "Version": {
          "type": "string"
        },
        "gitBranch": {
          "type": "string"
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": false
    },
    "rpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/protobufAny"
          }
        },
        "message": {
          "type": "string"
        }
      }
    }
  },
  "securityDefinitions": {
    "bearer": {
      "description": "Authentication token, prefixed by Bearer: Bearer \u003ctoken\u003e",
      "type": "apiKey",
      "name": "Authorization",
      "in": "header"
    }
  },
  "security": [
    {
      "bearer": []
    }
  ],
  "tags": [
    {
      "name": "Auth"
    },
    {
      "name": "Changelog"
    },
    {
      "name": "Cluster"
    },
    {
      "name": "ContainerCopy"
    },
    {
      "name": "Event"
    },
    {
      "name": "GitServer"
    },
    {
      "name": "Mars"
    },
    {
      "name": "Metrics"
    },
    {
      "name": "Namespace"
    },
    {
      "name": "Picture"
    },
    {
      "name": "Project"
    },
    {
      "name": "Version"
    }
  ]
}
