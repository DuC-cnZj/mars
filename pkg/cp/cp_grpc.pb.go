// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package cp

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CpClient is the client API for Cp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CpClient interface {
	CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error)
}

type cpClient struct {
	cc grpc.ClientConnInterface
}

func NewCpClient(cc grpc.ClientConnInterface) CpClient {
	return &cpClient{cc}
}

func (c *cpClient) CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error) {
	out := new(CopyToPodResponse)
	err := c.cc.Invoke(ctx, "/Cp/CopyToPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CpServer is the server API for Cp service.
// All implementations must embed UnimplementedCpServer
// for forward compatibility
type CpServer interface {
	CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error)
	mustEmbedUnimplementedCpServer()
}

// UnimplementedCpServer must be embedded to have forward compatible implementations.
type UnimplementedCpServer struct {
}

func (UnimplementedCpServer) CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyToPod not implemented")
}
func (UnimplementedCpServer) mustEmbedUnimplementedCpServer() {}

// UnsafeCpServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CpServer will
// result in compilation errors.
type UnsafeCpServer interface {
	mustEmbedUnimplementedCpServer()
}

func RegisterCpServer(s grpc.ServiceRegistrar, srv CpServer) {
	s.RegisterService(&Cp_ServiceDesc, srv)
}

func _Cp_CopyToPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyToPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CpServer).CopyToPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Cp/CopyToPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CpServer).CopyToPod(ctx, req.(*CopyToPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Cp_ServiceDesc is the grpc.ServiceDesc for Cp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Cp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Cp",
	HandlerType: (*CpServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyToPod",
			Handler:    _Cp_CopyToPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "cp/cp.proto",
}
