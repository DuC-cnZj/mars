// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package project

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ProjectClient is the client API for Project service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProjectClient interface {
	Destroy(ctx context.Context, in *ProjectDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	Show(ctx context.Context, in *ProjectShowRequest, opts ...grpc.CallOption) (*ProjectShowResponse, error)
	IsPodRunning(ctx context.Context, in *IsPodRunningRequest, opts ...grpc.CallOption) (*IsPodRunningResponse, error)
	AllPodContainers(ctx context.Context, in *AllPodContainersRequest, opts ...grpc.CallOption) (*AllPodContainersResponse, error)
	PodContainerLog(ctx context.Context, in *PodContainerLogRequest, opts ...grpc.CallOption) (*PodContainerLogResponse, error)
	StreamPodContainerLog(ctx context.Context, in *PodContainerLogRequest, opts ...grpc.CallOption) (Project_StreamPodContainerLogClient, error)
}

type projectClient struct {
	cc grpc.ClientConnInterface
}

func NewProjectClient(cc grpc.ClientConnInterface) ProjectClient {
	return &projectClient{cc}
}

func (c *projectClient) Destroy(ctx context.Context, in *ProjectDestroyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/Project/Destroy", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) Show(ctx context.Context, in *ProjectShowRequest, opts ...grpc.CallOption) (*ProjectShowResponse, error) {
	out := new(ProjectShowResponse)
	err := c.cc.Invoke(ctx, "/Project/Show", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) IsPodRunning(ctx context.Context, in *IsPodRunningRequest, opts ...grpc.CallOption) (*IsPodRunningResponse, error) {
	out := new(IsPodRunningResponse)
	err := c.cc.Invoke(ctx, "/Project/IsPodRunning", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) AllPodContainers(ctx context.Context, in *AllPodContainersRequest, opts ...grpc.CallOption) (*AllPodContainersResponse, error) {
	out := new(AllPodContainersResponse)
	err := c.cc.Invoke(ctx, "/Project/AllPodContainers", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) PodContainerLog(ctx context.Context, in *PodContainerLogRequest, opts ...grpc.CallOption) (*PodContainerLogResponse, error) {
	out := new(PodContainerLogResponse)
	err := c.cc.Invoke(ctx, "/Project/PodContainerLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *projectClient) StreamPodContainerLog(ctx context.Context, in *PodContainerLogRequest, opts ...grpc.CallOption) (Project_StreamPodContainerLogClient, error) {
	stream, err := c.cc.NewStream(ctx, &Project_ServiceDesc.Streams[0], "/Project/StreamPodContainerLog", opts...)
	if err != nil {
		return nil, err
	}
	x := &projectStreamPodContainerLogClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Project_StreamPodContainerLogClient interface {
	Recv() (*PodContainerLogResponse, error)
	grpc.ClientStream
}

type projectStreamPodContainerLogClient struct {
	grpc.ClientStream
}

func (x *projectStreamPodContainerLogClient) Recv() (*PodContainerLogResponse, error) {
	m := new(PodContainerLogResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ProjectServer is the server API for Project service.
// All implementations must embed UnimplementedProjectServer
// for forward compatibility
type ProjectServer interface {
	Destroy(context.Context, *ProjectDestroyRequest) (*emptypb.Empty, error)
	Show(context.Context, *ProjectShowRequest) (*ProjectShowResponse, error)
	IsPodRunning(context.Context, *IsPodRunningRequest) (*IsPodRunningResponse, error)
	AllPodContainers(context.Context, *AllPodContainersRequest) (*AllPodContainersResponse, error)
	PodContainerLog(context.Context, *PodContainerLogRequest) (*PodContainerLogResponse, error)
	StreamPodContainerLog(*PodContainerLogRequest, Project_StreamPodContainerLogServer) error
	mustEmbedUnimplementedProjectServer()
}

// UnimplementedProjectServer must be embedded to have forward compatible implementations.
type UnimplementedProjectServer struct {
}

func (UnimplementedProjectServer) Destroy(context.Context, *ProjectDestroyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Destroy not implemented")
}
func (UnimplementedProjectServer) Show(context.Context, *ProjectShowRequest) (*ProjectShowResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Show not implemented")
}
func (UnimplementedProjectServer) IsPodRunning(context.Context, *IsPodRunningRequest) (*IsPodRunningResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsPodRunning not implemented")
}
func (UnimplementedProjectServer) AllPodContainers(context.Context, *AllPodContainersRequest) (*AllPodContainersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPodContainers not implemented")
}
func (UnimplementedProjectServer) PodContainerLog(context.Context, *PodContainerLogRequest) (*PodContainerLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PodContainerLog not implemented")
}
func (UnimplementedProjectServer) StreamPodContainerLog(*PodContainerLogRequest, Project_StreamPodContainerLogServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPodContainerLog not implemented")
}
func (UnimplementedProjectServer) mustEmbedUnimplementedProjectServer() {}

// UnsafeProjectServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProjectServer will
// result in compilation errors.
type UnsafeProjectServer interface {
	mustEmbedUnimplementedProjectServer()
}

func RegisterProjectServer(s grpc.ServiceRegistrar, srv ProjectServer) {
	s.RegisterService(&Project_ServiceDesc, srv)
}

func _Project_Destroy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectDestroyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Destroy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/Destroy",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Destroy(ctx, req.(*ProjectDestroyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_Show_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProjectShowRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).Show(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/Show",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).Show(ctx, req.(*ProjectShowRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_IsPodRunning_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsPodRunningRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).IsPodRunning(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/IsPodRunning",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).IsPodRunning(ctx, req.(*IsPodRunningRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_AllPodContainers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AllPodContainersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).AllPodContainers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/AllPodContainers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).AllPodContainers(ctx, req.(*AllPodContainersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_PodContainerLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PodContainerLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProjectServer).PodContainerLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Project/PodContainerLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProjectServer).PodContainerLog(ctx, req.(*PodContainerLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Project_StreamPodContainerLog_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(PodContainerLogRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ProjectServer).StreamPodContainerLog(m, &projectStreamPodContainerLogServer{stream})
}

type Project_StreamPodContainerLogServer interface {
	Send(*PodContainerLogResponse) error
	grpc.ServerStream
}

type projectStreamPodContainerLogServer struct {
	grpc.ServerStream
}

func (x *projectStreamPodContainerLogServer) Send(m *PodContainerLogResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Project_ServiceDesc is the grpc.ServiceDesc for Project service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Project_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Project",
	HandlerType: (*ProjectServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Destroy",
			Handler:    _Project_Destroy_Handler,
		},
		{
			MethodName: "Show",
			Handler:    _Project_Show_Handler,
		},
		{
			MethodName: "IsPodRunning",
			Handler:    _Project_IsPodRunning_Handler,
		},
		{
			MethodName: "AllPodContainers",
			Handler:    _Project_AllPodContainers_Handler,
		},
		{
			MethodName: "PodContainerLog",
			Handler:    _Project_PodContainerLog_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPodContainerLog",
			Handler:       _Project_StreamPodContainerLog_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "project/project.proto",
}
