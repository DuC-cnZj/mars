// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: token/token.proto

package token

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on AllRequest with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllRequestMultiError, or
// nil if none found.
func (m *AllRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *AllRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return AllRequestMultiError(errors)
	}

	return nil
}

// AllRequestMultiError is an error wrapping multiple validation errors
// returned by AllRequest.ValidateAll() if the designated constraints aren't met.
type AllRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllRequestMultiError) AllErrors() []error { return m }

// AllRequestValidationError is the validation error returned by
// AllRequest.Validate if the designated constraints aren't met.
type AllRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllRequestValidationError) ErrorName() string { return "AllRequestValidationError" }

// Error satisfies the builtin error interface
func (e AllRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllRequestValidationError{}

// Validate checks the field values on AllResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *AllResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on AllResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in AllResponseMultiError, or
// nil if none found.
func (m *AllResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *AllResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetItems() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, AllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, AllResponseValidationError{
						field:  fmt.Sprintf("Items[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return AllResponseValidationError{
					field:  fmt.Sprintf("Items[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return AllResponseMultiError(errors)
	}

	return nil
}

// AllResponseMultiError is an error wrapping multiple validation errors
// returned by AllResponse.ValidateAll() if the designated constraints aren't met.
type AllResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AllResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AllResponseMultiError) AllErrors() []error { return m }

// AllResponseValidationError is the validation error returned by
// AllResponse.Validate if the designated constraints aren't met.
type AllResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AllResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AllResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AllResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AllResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AllResponseValidationError) ErrorName() string { return "AllResponseValidationError" }

// Error satisfies the builtin error interface
func (e AllResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAllResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AllResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AllResponseValidationError{}

// Validate checks the field values on GrantRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantRequestMultiError, or
// nil if none found.
func (m *GrantRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetExpireSeconds() <= 0 {
		err := GrantRequestValidationError{
			field:  "ExpireSeconds",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(m.GetUsage()) > 30 {
		err := GrantRequestValidationError{
			field:  "Usage",
			reason: "value length must be at most 30 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GrantRequestMultiError(errors)
	}

	return nil
}

// GrantRequestMultiError is an error wrapping multiple validation errors
// returned by GrantRequest.ValidateAll() if the designated constraints aren't met.
type GrantRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantRequestMultiError) AllErrors() []error { return m }

// GrantRequestValidationError is the validation error returned by
// GrantRequest.Validate if the designated constraints aren't met.
type GrantRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantRequestValidationError) ErrorName() string { return "GrantRequestValidationError" }

// Error satisfies the builtin error interface
func (e GrantRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantRequestValidationError{}

// Validate checks the field values on GrantResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *GrantResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GrantResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in GrantResponseMultiError, or
// nil if none found.
func (m *GrantResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GrantResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GrantResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GrantResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GrantResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GrantResponseMultiError(errors)
	}

	return nil
}

// GrantResponseMultiError is an error wrapping multiple validation errors
// returned by GrantResponse.ValidateAll() if the designated constraints
// aren't met.
type GrantResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GrantResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GrantResponseMultiError) AllErrors() []error { return m }

// GrantResponseValidationError is the validation error returned by
// GrantResponse.Validate if the designated constraints aren't met.
type GrantResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GrantResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GrantResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GrantResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GrantResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GrantResponseValidationError) ErrorName() string { return "GrantResponseValidationError" }

// Error satisfies the builtin error interface
func (e GrantResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGrantResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GrantResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GrantResponseValidationError{}

// Validate checks the field values on LeaseRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaseRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaseRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaseRequestMultiError, or
// nil if none found.
func (m *LeaseRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaseRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetToken()) < 1 {
		err := LeaseRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetExpireSeconds() <= 0 {
		err := LeaseRequestValidationError{
			field:  "ExpireSeconds",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LeaseRequestMultiError(errors)
	}

	return nil
}

// LeaseRequestMultiError is an error wrapping multiple validation errors
// returned by LeaseRequest.ValidateAll() if the designated constraints aren't met.
type LeaseRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaseRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaseRequestMultiError) AllErrors() []error { return m }

// LeaseRequestValidationError is the validation error returned by
// LeaseRequest.Validate if the designated constraints aren't met.
type LeaseRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaseRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaseRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaseRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaseRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaseRequestValidationError) ErrorName() string { return "LeaseRequestValidationError" }

// Error satisfies the builtin error interface
func (e LeaseRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaseRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaseRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaseRequestValidationError{}

// Validate checks the field values on LeaseResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LeaseResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LeaseResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LeaseResponseMultiError, or
// nil if none found.
func (m *LeaseResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LeaseResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetToken()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, LeaseResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, LeaseResponseValidationError{
					field:  "Token",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetToken()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return LeaseResponseValidationError{
				field:  "Token",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return LeaseResponseMultiError(errors)
	}

	return nil
}

// LeaseResponseMultiError is an error wrapping multiple validation errors
// returned by LeaseResponse.ValidateAll() if the designated constraints
// aren't met.
type LeaseResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LeaseResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LeaseResponseMultiError) AllErrors() []error { return m }

// LeaseResponseValidationError is the validation error returned by
// LeaseResponse.Validate if the designated constraints aren't met.
type LeaseResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LeaseResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LeaseResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LeaseResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LeaseResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LeaseResponseValidationError) ErrorName() string { return "LeaseResponseValidationError" }

// Error satisfies the builtin error interface
func (e LeaseResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLeaseResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LeaseResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LeaseResponseValidationError{}

// Validate checks the field values on RevokeRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevokeRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevokeRequestMultiError, or
// nil if none found.
func (m *RevokeRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(m.GetToken()) < 1 {
		err := RevokeRequestValidationError{
			field:  "Token",
			reason: "value length must be at least 1 bytes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return RevokeRequestMultiError(errors)
	}

	return nil
}

// RevokeRequestMultiError is an error wrapping multiple validation errors
// returned by RevokeRequest.ValidateAll() if the designated constraints
// aren't met.
type RevokeRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeRequestMultiError) AllErrors() []error { return m }

// RevokeRequestValidationError is the validation error returned by
// RevokeRequest.Validate if the designated constraints aren't met.
type RevokeRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeRequestValidationError) ErrorName() string { return "RevokeRequestValidationError" }

// Error satisfies the builtin error interface
func (e RevokeRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeRequestValidationError{}

// Validate checks the field values on RevokeResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *RevokeResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on RevokeResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in RevokeResponseMultiError,
// or nil if none found.
func (m *RevokeResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *RevokeResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return RevokeResponseMultiError(errors)
	}

	return nil
}

// RevokeResponseMultiError is an error wrapping multiple validation errors
// returned by RevokeResponse.ValidateAll() if the designated constraints
// aren't met.
type RevokeResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m RevokeResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m RevokeResponseMultiError) AllErrors() []error { return m }

// RevokeResponseValidationError is the validation error returned by
// RevokeResponse.Validate if the designated constraints aren't met.
type RevokeResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e RevokeResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e RevokeResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e RevokeResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e RevokeResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e RevokeResponseValidationError) ErrorName() string { return "RevokeResponseValidationError" }

// Error satisfies the builtin error interface
func (e RevokeResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sRevokeResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = RevokeResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = RevokeResponseValidationError{}
