// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package metrics

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MetricsClient is the client API for Metrics service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MetricsClient interface {
	ProjectByID(ctx context.Context, in *ProjectByIDRequest, opts ...grpc.CallOption) (Metrics_ProjectByIDClient, error)
}

type metricsClient struct {
	cc grpc.ClientConnInterface
}

func NewMetricsClient(cc grpc.ClientConnInterface) MetricsClient {
	return &metricsClient{cc}
}

func (c *metricsClient) ProjectByID(ctx context.Context, in *ProjectByIDRequest, opts ...grpc.CallOption) (Metrics_ProjectByIDClient, error) {
	stream, err := c.cc.NewStream(ctx, &Metrics_ServiceDesc.Streams[0], "/Metrics/ProjectByID", opts...)
	if err != nil {
		return nil, err
	}
	x := &metricsProjectByIDClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Metrics_ProjectByIDClient interface {
	Recv() (*ProjectByIDResponse, error)
	grpc.ClientStream
}

type metricsProjectByIDClient struct {
	grpc.ClientStream
}

func (x *metricsProjectByIDClient) Recv() (*ProjectByIDResponse, error) {
	m := new(ProjectByIDResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// MetricsServer is the server API for Metrics service.
// All implementations must embed UnimplementedMetricsServer
// for forward compatibility
type MetricsServer interface {
	ProjectByID(*ProjectByIDRequest, Metrics_ProjectByIDServer) error
	mustEmbedUnimplementedMetricsServer()
}

// UnimplementedMetricsServer must be embedded to have forward compatible implementations.
type UnimplementedMetricsServer struct {
}

func (UnimplementedMetricsServer) ProjectByID(*ProjectByIDRequest, Metrics_ProjectByIDServer) error {
	return status.Errorf(codes.Unimplemented, "method ProjectByID not implemented")
}
func (UnimplementedMetricsServer) mustEmbedUnimplementedMetricsServer() {}

// UnsafeMetricsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MetricsServer will
// result in compilation errors.
type UnsafeMetricsServer interface {
	mustEmbedUnimplementedMetricsServer()
}

func RegisterMetricsServer(s grpc.ServiceRegistrar, srv MetricsServer) {
	s.RegisterService(&Metrics_ServiceDesc, srv)
}

func _Metrics_ProjectByID_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ProjectByIDRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(MetricsServer).ProjectByID(m, &metricsProjectByIDServer{stream})
}

type Metrics_ProjectByIDServer interface {
	Send(*ProjectByIDResponse) error
	grpc.ServerStream
}

type metricsProjectByIDServer struct {
	grpc.ServerStream
}

func (x *metricsProjectByIDServer) Send(m *ProjectByIDResponse) error {
	return x.ServerStream.SendMsg(m)
}

// Metrics_ServiceDesc is the grpc.ServiceDesc for Metrics service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Metrics_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Metrics",
	HandlerType: (*MetricsServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ProjectByID",
			Handler:       _Metrics_ProjectByID_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "metrics/metrics.proto",
}
