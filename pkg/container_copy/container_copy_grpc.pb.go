// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package container_copy

import (
	context "context"

	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ContainerCopyClient is the client API for ContainerCopy service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ContainerCopyClient interface {
	CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error)
}

type containerCopyClient struct {
	cc grpc.ClientConnInterface
}

func NewContainerCopyClient(cc grpc.ClientConnInterface) ContainerCopyClient {
	return &containerCopyClient{cc}
}

func (c *containerCopyClient) CopyToPod(ctx context.Context, in *CopyToPodRequest, opts ...grpc.CallOption) (*CopyToPodResponse, error) {
	out := new(CopyToPodResponse)
	err := c.cc.Invoke(ctx, "/ContainerCopy/CopyToPod", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ContainerCopyServer is the server API for ContainerCopy service.
// All implementations must embed UnimplementedContainerCopyServer
// for forward compatibility
type ContainerCopyServer interface {
	CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error)
	mustEmbedUnimplementedContainerCopyServer()
}

// UnimplementedContainerCopyServer must be embedded to have forward compatible implementations.
type UnimplementedContainerCopyServer struct {
}

func (UnimplementedContainerCopyServer) CopyToPod(context.Context, *CopyToPodRequest) (*CopyToPodResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CopyToPod not implemented")
}
func (UnimplementedContainerCopyServer) mustEmbedUnimplementedContainerCopyServer() {}

// UnsafeContainerCopyServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ContainerCopyServer will
// result in compilation errors.
type UnsafeContainerCopyServer interface {
	mustEmbedUnimplementedContainerCopyServer()
}

func RegisterContainerCopyServer(s grpc.ServiceRegistrar, srv ContainerCopyServer) {
	s.RegisterService(&ContainerCopy_ServiceDesc, srv)
}

func _ContainerCopy_CopyToPod_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CopyToPodRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContainerCopyServer).CopyToPod(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/ContainerCopy/CopyToPod",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContainerCopyServer).CopyToPod(ctx, req.(*CopyToPodRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ContainerCopy_ServiceDesc is the grpc.ServiceDesc for ContainerCopy service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ContainerCopy_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ContainerCopy",
	HandlerType: (*ContainerCopyServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CopyToPod",
			Handler:    _ContainerCopy_CopyToPod_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "container_copy/container_copy.proto",
}
