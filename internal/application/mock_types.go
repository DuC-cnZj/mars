// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v4/internal/application (interfaces: PluginManger,Picture,Project,App,WsServer,PubSub)
//
// Generated by this command:
//
//	mockgen -destination ./mock_types.go -package application github.com/duc-cnzj/mars/v4/internal/application PluginManger,Picture,Project,App,WsServer,PubSub
//

// Package application is a generated GoMock package.
package application

import (
	context "context"
	http "net/http"
	reflect "reflect"

	auth "github.com/duc-cnzj/mars/v4/internal/auth"
	cache "github.com/duc-cnzj/mars/v4/internal/cache"
	config "github.com/duc-cnzj/mars/v4/internal/config"
	cron "github.com/duc-cnzj/mars/v4/internal/cron"
	data "github.com/duc-cnzj/mars/v4/internal/data"
	ent "github.com/duc-cnzj/mars/v4/internal/ent"
	event "github.com/duc-cnzj/mars/v4/internal/event"
	locker "github.com/duc-cnzj/mars/v4/internal/locker"
	mlog "github.com/duc-cnzj/mars/v4/internal/mlog"
	uploader "github.com/duc-cnzj/mars/v4/internal/uploader"
	prometheus "github.com/prometheus/client_golang/prometheus"
	gomock "go.uber.org/mock/gomock"
	singleflight "golang.org/x/sync/singleflight"
	v1 "k8s.io/api/core/v1"
)

// MockPluginManger is a mock of PluginManger interface.
type MockPluginManger struct {
	ctrl     *gomock.Controller
	recorder *MockPluginMangerMockRecorder
}

// MockPluginMangerMockRecorder is the mock recorder for MockPluginManger.
type MockPluginMangerMockRecorder struct {
	mock *MockPluginManger
}

// NewMockPluginManger creates a new mock instance.
func NewMockPluginManger(ctrl *gomock.Controller) *MockPluginManger {
	mock := &MockPluginManger{ctrl: ctrl}
	mock.recorder = &MockPluginMangerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginManger) EXPECT() *MockPluginMangerMockRecorder {
	return m.recorder
}

// Domain mocks base method.
func (m *MockPluginManger) Domain() DomainManager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Domain")
	ret0, _ := ret[0].(DomainManager)
	return ret0
}

// Domain indicates an expected call of Domain.
func (mr *MockPluginMangerMockRecorder) Domain() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Domain", reflect.TypeOf((*MockPluginManger)(nil).Domain))
}

// GetPlugins mocks base method.
func (m *MockPluginManger) GetPlugins() map[string]Plugin {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPlugins")
	ret0, _ := ret[0].(map[string]Plugin)
	return ret0
}

// GetPlugins indicates an expected call of GetPlugins.
func (mr *MockPluginMangerMockRecorder) GetPlugins() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPlugins", reflect.TypeOf((*MockPluginManger)(nil).GetPlugins))
}

// Git mocks base method.
func (m *MockPluginManger) Git() GitServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Git")
	ret0, _ := ret[0].(GitServer)
	return ret0
}

// Git indicates an expected call of Git.
func (mr *MockPluginMangerMockRecorder) Git() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Git", reflect.TypeOf((*MockPluginManger)(nil).Git))
}

// Load mocks base method.
func (m *MockPluginManger) Load(arg0 App) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Load", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Load indicates an expected call of Load.
func (mr *MockPluginMangerMockRecorder) Load(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Load", reflect.TypeOf((*MockPluginManger)(nil).Load), arg0)
}

// Picture mocks base method.
func (m *MockPluginManger) Picture() Picture {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Picture")
	ret0, _ := ret[0].(Picture)
	return ret0
}

// Picture indicates an expected call of Picture.
func (mr *MockPluginMangerMockRecorder) Picture() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Picture", reflect.TypeOf((*MockPluginManger)(nil).Picture))
}

// Ws mocks base method.
func (m *MockPluginManger) Ws() WsSender {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Ws")
	ret0, _ := ret[0].(WsSender)
	return ret0
}

// Ws indicates an expected call of Ws.
func (mr *MockPluginMangerMockRecorder) Ws() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Ws", reflect.TypeOf((*MockPluginManger)(nil).Ws))
}

// MockPicture is a mock of Picture interface.
type MockPicture struct {
	ctrl     *gomock.Controller
	recorder *MockPictureMockRecorder
}

// MockPictureMockRecorder is the mock recorder for MockPicture.
type MockPictureMockRecorder struct {
	mock *MockPicture
}

// NewMockPicture creates a new mock instance.
func NewMockPicture(ctrl *gomock.Controller) *MockPicture {
	mock := &MockPicture{ctrl: ctrl}
	mock.recorder = &MockPictureMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPicture) EXPECT() *MockPictureMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPicture) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPictureMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPicture)(nil).Destroy))
}

// Get mocks base method.
func (m *MockPicture) Get(arg0 context.Context, arg1 bool) (*PictureItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1)
	ret0, _ := ret[0].(*PictureItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockPictureMockRecorder) Get(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockPicture)(nil).Get), arg0, arg1)
}

// Initialize mocks base method.
func (m *MockPicture) Initialize(arg0 App, arg1 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPictureMockRecorder) Initialize(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPicture)(nil).Initialize), arg0, arg1)
}

// Name mocks base method.
func (m *MockPicture) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPictureMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPicture)(nil).Name))
}

// MockProject is a mock of Project interface.
type MockProject struct {
	ctrl     *gomock.Controller
	recorder *MockProjectMockRecorder
}

// MockProjectMockRecorder is the mock recorder for MockProject.
type MockProjectMockRecorder struct {
	mock *MockProject
}

// NewMockProject creates a new mock instance.
func NewMockProject(ctrl *gomock.Controller) *MockProject {
	mock := &MockProject{ctrl: ctrl}
	mock.recorder = &MockProjectMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProject) EXPECT() *MockProjectMockRecorder {
	return m.recorder
}

// GetAvatarURL mocks base method.
func (m *MockProject) GetAvatarURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockProjectMockRecorder) GetAvatarURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockProject)(nil).GetAvatarURL))
}

// GetDefaultBranch mocks base method.
func (m *MockProject) GetDefaultBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockProjectMockRecorder) GetDefaultBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockProject)(nil).GetDefaultBranch))
}

// GetDescription mocks base method.
func (m *MockProject) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockProjectMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockProject)(nil).GetDescription))
}

// GetID mocks base method.
func (m *MockProject) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockProjectMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockProject)(nil).GetID))
}

// GetName mocks base method.
func (m *MockProject) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockProjectMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockProject)(nil).GetName))
}

// GetPath mocks base method.
func (m *MockProject) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockProjectMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockProject)(nil).GetPath))
}

// GetWebURL mocks base method.
func (m *MockProject) GetWebURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWebURL indicates an expected call of GetWebURL.
func (mr *MockProjectMockRecorder) GetWebURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebURL", reflect.TypeOf((*MockProject)(nil).GetWebURL))
}

// MockApp is a mock of App interface.
type MockApp struct {
	ctrl     *gomock.Controller
	recorder *MockAppMockRecorder
}

// MockAppMockRecorder is the mock recorder for MockApp.
type MockAppMockRecorder struct {
	mock *MockApp
}

// NewMockApp creates a new mock instance.
func NewMockApp(ctrl *gomock.Controller) *MockApp {
	mock := &MockApp{ctrl: ctrl}
	mock.recorder = &MockAppMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockApp) EXPECT() *MockAppMockRecorder {
	return m.recorder
}

// AddServer mocks base method.
func (m *MockApp) AddServer(arg0 Server) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddServer", arg0)
}

// AddServer indicates an expected call of AddServer.
func (mr *MockAppMockRecorder) AddServer(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddServer", reflect.TypeOf((*MockApp)(nil).AddServer), arg0)
}

// Auth mocks base method.
func (m *MockApp) Auth() auth.Auth {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Auth")
	ret0, _ := ret[0].(auth.Auth)
	return ret0
}

// Auth indicates an expected call of Auth.
func (mr *MockAppMockRecorder) Auth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Auth", reflect.TypeOf((*MockApp)(nil).Auth))
}

// BeforeServerRunHooks mocks base method.
func (m *MockApp) BeforeServerRunHooks(arg0 Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BeforeServerRunHooks", arg0)
}

// BeforeServerRunHooks indicates an expected call of BeforeServerRunHooks.
func (mr *MockAppMockRecorder) BeforeServerRunHooks(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BeforeServerRunHooks", reflect.TypeOf((*MockApp)(nil).BeforeServerRunHooks), arg0)
}

// Bootstrap mocks base method.
func (m *MockApp) Bootstrap() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bootstrap")
	ret0, _ := ret[0].(error)
	return ret0
}

// Bootstrap indicates an expected call of Bootstrap.
func (mr *MockAppMockRecorder) Bootstrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bootstrap", reflect.TypeOf((*MockApp)(nil).Bootstrap))
}

// Cache mocks base method.
func (m *MockApp) Cache() cache.Cache {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cache")
	ret0, _ := ret[0].(cache.Cache)
	return ret0
}

// Cache indicates an expected call of Cache.
func (mr *MockAppMockRecorder) Cache() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cache", reflect.TypeOf((*MockApp)(nil).Cache))
}

// Config mocks base method.
func (m *MockApp) Config() *config.Config {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config")
	ret0, _ := ret[0].(*config.Config)
	return ret0
}

// Config indicates an expected call of Config.
func (mr *MockAppMockRecorder) Config() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockApp)(nil).Config))
}

// CronManager mocks base method.
func (m *MockApp) CronManager() cron.Manager {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CronManager")
	ret0, _ := ret[0].(cron.Manager)
	return ret0
}

// CronManager indicates an expected call of CronManager.
func (mr *MockAppMockRecorder) CronManager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CronManager", reflect.TypeOf((*MockApp)(nil).CronManager))
}

// DB mocks base method.
func (m *MockApp) DB() *ent.Client {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DB")
	ret0, _ := ret[0].(*ent.Client)
	return ret0
}

// DB indicates an expected call of DB.
func (mr *MockAppMockRecorder) DB() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DB", reflect.TypeOf((*MockApp)(nil).DB))
}

// Data mocks base method.
func (m *MockApp) Data() data.Data {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Data")
	ret0, _ := ret[0].(data.Data)
	return ret0
}

// Data indicates an expected call of Data.
func (mr *MockAppMockRecorder) Data() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Data", reflect.TypeOf((*MockApp)(nil).Data))
}

// Dispatcher mocks base method.
func (m *MockApp) Dispatcher() event.Dispatcher {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Dispatcher")
	ret0, _ := ret[0].(event.Dispatcher)
	return ret0
}

// Dispatcher indicates an expected call of Dispatcher.
func (mr *MockAppMockRecorder) Dispatcher() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Dispatcher", reflect.TypeOf((*MockApp)(nil).Dispatcher))
}

// Done mocks base method.
func (m *MockApp) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockAppMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockApp)(nil).Done))
}

// GrpcRegistry mocks base method.
func (m *MockApp) GrpcRegistry() *GrpcRegistry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GrpcRegistry")
	ret0, _ := ret[0].(*GrpcRegistry)
	return ret0
}

// GrpcRegistry indicates an expected call of GrpcRegistry.
func (mr *MockAppMockRecorder) GrpcRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GrpcRegistry", reflect.TypeOf((*MockApp)(nil).GrpcRegistry))
}

// IsDebug mocks base method.
func (m *MockApp) IsDebug() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDebug")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDebug indicates an expected call of IsDebug.
func (mr *MockAppMockRecorder) IsDebug() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDebug", reflect.TypeOf((*MockApp)(nil).IsDebug))
}

// Locker mocks base method.
func (m *MockApp) Locker() locker.Locker {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Locker")
	ret0, _ := ret[0].(locker.Locker)
	return ret0
}

// Locker indicates an expected call of Locker.
func (mr *MockAppMockRecorder) Locker() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Locker", reflect.TypeOf((*MockApp)(nil).Locker))
}

// Logger mocks base method.
func (m *MockApp) Logger() mlog.Logger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logger")
	ret0, _ := ret[0].(mlog.Logger)
	return ret0
}

// Logger indicates an expected call of Logger.
func (mr *MockAppMockRecorder) Logger() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logger", reflect.TypeOf((*MockApp)(nil).Logger))
}

// Oidc mocks base method.
func (m *MockApp) Oidc() data.OidcConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Oidc")
	ret0, _ := ret[0].(data.OidcConfig)
	return ret0
}

// Oidc indicates an expected call of Oidc.
func (mr *MockAppMockRecorder) Oidc() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Oidc", reflect.TypeOf((*MockApp)(nil).Oidc))
}

// PluginMgr mocks base method.
func (m *MockApp) PluginMgr() PluginManger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PluginMgr")
	ret0, _ := ret[0].(PluginManger)
	return ret0
}

// PluginMgr indicates an expected call of PluginMgr.
func (mr *MockAppMockRecorder) PluginMgr() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PluginMgr", reflect.TypeOf((*MockApp)(nil).PluginMgr))
}

// PrometheusRegistry mocks base method.
func (m *MockApp) PrometheusRegistry() *prometheus.Registry {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PrometheusRegistry")
	ret0, _ := ret[0].(*prometheus.Registry)
	return ret0
}

// PrometheusRegistry indicates an expected call of PrometheusRegistry.
func (mr *MockAppMockRecorder) PrometheusRegistry() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PrometheusRegistry", reflect.TypeOf((*MockApp)(nil).PrometheusRegistry))
}

// RegisterAfterShutdownFunc mocks base method.
func (m *MockApp) RegisterAfterShutdownFunc(arg0 Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterAfterShutdownFunc", arg0)
}

// RegisterAfterShutdownFunc indicates an expected call of RegisterAfterShutdownFunc.
func (mr *MockAppMockRecorder) RegisterAfterShutdownFunc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterAfterShutdownFunc", reflect.TypeOf((*MockApp)(nil).RegisterAfterShutdownFunc), arg0)
}

// RegisterBeforeShutdownFunc mocks base method.
func (m *MockApp) RegisterBeforeShutdownFunc(arg0 Callback) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "RegisterBeforeShutdownFunc", arg0)
}

// RegisterBeforeShutdownFunc indicates an expected call of RegisterBeforeShutdownFunc.
func (mr *MockAppMockRecorder) RegisterBeforeShutdownFunc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegisterBeforeShutdownFunc", reflect.TypeOf((*MockApp)(nil).RegisterBeforeShutdownFunc), arg0)
}

// Run mocks base method.
func (m *MockApp) Run() context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockAppMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockApp)(nil).Run))
}

// Shutdown mocks base method.
func (m *MockApp) Shutdown() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Shutdown")
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockAppMockRecorder) Shutdown() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockApp)(nil).Shutdown))
}

// Singleflight mocks base method.
func (m *MockApp) Singleflight() *singleflight.Group {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Singleflight")
	ret0, _ := ret[0].(*singleflight.Group)
	return ret0
}

// Singleflight indicates an expected call of Singleflight.
func (mr *MockAppMockRecorder) Singleflight() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Singleflight", reflect.TypeOf((*MockApp)(nil).Singleflight))
}

// Uploader mocks base method.
func (m *MockApp) Uploader() uploader.Uploader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uploader")
	ret0, _ := ret[0].(uploader.Uploader)
	return ret0
}

// Uploader indicates an expected call of Uploader.
func (mr *MockAppMockRecorder) Uploader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uploader", reflect.TypeOf((*MockApp)(nil).Uploader))
}

// WsServer mocks base method.
func (m *MockApp) WsServer() WsServer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WsServer")
	ret0, _ := ret[0].(WsServer)
	return ret0
}

// WsServer indicates an expected call of WsServer.
func (mr *MockAppMockRecorder) WsServer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WsServer", reflect.TypeOf((*MockApp)(nil).WsServer))
}

// MockWsServer is a mock of WsServer interface.
type MockWsServer struct {
	ctrl     *gomock.Controller
	recorder *MockWsServerMockRecorder
}

// MockWsServerMockRecorder is the mock recorder for MockWsServer.
type MockWsServerMockRecorder struct {
	mock *MockWsServer
}

// NewMockWsServer creates a new mock instance.
func NewMockWsServer(ctrl *gomock.Controller) *MockWsServer {
	mock := &MockWsServer{ctrl: ctrl}
	mock.recorder = &MockWsServerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWsServer) EXPECT() *MockWsServerMockRecorder {
	return m.recorder
}

// Info mocks base method.
func (m *MockWsServer) Info(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0, arg1)
}

// Info indicates an expected call of Info.
func (mr *MockWsServerMockRecorder) Info(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWsServer)(nil).Info), arg0, arg1)
}

// Serve mocks base method.
func (m *MockWsServer) Serve(arg0 http.ResponseWriter, arg1 *http.Request) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Serve", arg0, arg1)
}

// Serve indicates an expected call of Serve.
func (mr *MockWsServerMockRecorder) Serve(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Serve", reflect.TypeOf((*MockWsServer)(nil).Serve), arg0, arg1)
}

// Shutdown mocks base method.
func (m *MockWsServer) Shutdown(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Shutdown", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Shutdown indicates an expected call of Shutdown.
func (mr *MockWsServerMockRecorder) Shutdown(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Shutdown", reflect.TypeOf((*MockWsServer)(nil).Shutdown), arg0)
}

// TickClusterHealth mocks base method.
func (m *MockWsServer) TickClusterHealth(arg0 <-chan struct{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "TickClusterHealth", arg0)
}

// TickClusterHealth indicates an expected call of TickClusterHealth.
func (mr *MockWsServerMockRecorder) TickClusterHealth(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TickClusterHealth", reflect.TypeOf((*MockWsServer)(nil).TickClusterHealth), arg0)
}

// MockPubSub is a mock of PubSub interface.
type MockPubSub struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubMockRecorder
}

// MockPubSubMockRecorder is the mock recorder for MockPubSub.
type MockPubSubMockRecorder struct {
	mock *MockPubSub
}

// NewMockPubSub creates a new mock instance.
func NewMockPubSub(ctrl *gomock.Controller) *MockPubSub {
	mock := &MockPubSub{ctrl: ctrl}
	mock.recorder = &MockPubSubMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSub) EXPECT() *MockPubSubMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPubSub) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockPubSubMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPubSub)(nil).Close))
}

// ID mocks base method.
func (m *MockPubSub) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockPubSubMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockPubSub)(nil).ID))
}

// Info mocks base method.
func (m *MockPubSub) Info() any {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Info")
	ret0, _ := ret[0].(any)
	return ret0
}

// Info indicates an expected call of Info.
func (mr *MockPubSubMockRecorder) Info() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockPubSub)(nil).Info))
}

// Join mocks base method.
func (m *MockPubSub) Join(arg0 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Join", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Join indicates an expected call of Join.
func (mr *MockPubSubMockRecorder) Join(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Join", reflect.TypeOf((*MockPubSub)(nil).Join), arg0)
}

// Leave mocks base method.
func (m *MockPubSub) Leave(arg0, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Leave", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Leave indicates an expected call of Leave.
func (mr *MockPubSubMockRecorder) Leave(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Leave", reflect.TypeOf((*MockPubSub)(nil).Leave), arg0, arg1)
}

// Publish mocks base method.
func (m *MockPubSub) Publish(arg0 int64, arg1 *v1.Pod) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Publish", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Publish indicates an expected call of Publish.
func (mr *MockPubSubMockRecorder) Publish(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Publish", reflect.TypeOf((*MockPubSub)(nil).Publish), arg0, arg1)
}

// Run mocks base method.
func (m *MockPubSub) Run(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockPubSubMockRecorder) Run(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockPubSub)(nil).Run), arg0)
}

// Subscribe mocks base method.
func (m *MockPubSub) Subscribe() <-chan []byte {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscribe")
	ret0, _ := ret[0].(<-chan []byte)
	return ret0
}

// Subscribe indicates an expected call of Subscribe.
func (mr *MockPubSubMockRecorder) Subscribe() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscribe", reflect.TypeOf((*MockPubSub)(nil).Subscribe))
}

// ToAll mocks base method.
func (m *MockPubSub) ToAll(arg0 WebsocketMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToAll", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToAll indicates an expected call of ToAll.
func (mr *MockPubSubMockRecorder) ToAll(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToAll", reflect.TypeOf((*MockPubSub)(nil).ToAll), arg0)
}

// ToOthers mocks base method.
func (m *MockPubSub) ToOthers(arg0 WebsocketMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToOthers", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToOthers indicates an expected call of ToOthers.
func (mr *MockPubSubMockRecorder) ToOthers(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToOthers", reflect.TypeOf((*MockPubSub)(nil).ToOthers), arg0)
}

// ToSelf mocks base method.
func (m *MockPubSub) ToSelf(arg0 WebsocketMessage) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ToSelf", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// ToSelf indicates an expected call of ToSelf.
func (mr *MockPubSubMockRecorder) ToSelf(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ToSelf", reflect.TypeOf((*MockPubSub)(nil).ToSelf), arg0)
}

// Uid mocks base method.
func (m *MockPubSub) Uid() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Uid")
	ret0, _ := ret[0].(string)
	return ret0
}

// Uid indicates an expected call of Uid.
func (mr *MockPubSubMockRecorder) Uid() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Uid", reflect.TypeOf((*MockPubSub)(nil).Uid))
}
