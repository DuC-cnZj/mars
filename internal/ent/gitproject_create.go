// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v4/mars"
	"github.com/duc-cnzj/mars/v4/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v4/internal/ent/gitproject"
)

// GitProjectCreate is the builder for creating a GitProject entity.
type GitProjectCreate struct {
	config
	mutation *GitProjectMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCreatedAt sets the "created_at" field.
func (gpc *GitProjectCreate) SetCreatedAt(t time.Time) *GitProjectCreate {
	gpc.mutation.SetCreatedAt(t)
	return gpc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableCreatedAt(t *time.Time) *GitProjectCreate {
	if t != nil {
		gpc.SetCreatedAt(*t)
	}
	return gpc
}

// SetUpdatedAt sets the "updated_at" field.
func (gpc *GitProjectCreate) SetUpdatedAt(t time.Time) *GitProjectCreate {
	gpc.mutation.SetUpdatedAt(t)
	return gpc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableUpdatedAt(t *time.Time) *GitProjectCreate {
	if t != nil {
		gpc.SetUpdatedAt(*t)
	}
	return gpc
}

// SetDeletedAt sets the "deleted_at" field.
func (gpc *GitProjectCreate) SetDeletedAt(t time.Time) *GitProjectCreate {
	gpc.mutation.SetDeletedAt(t)
	return gpc
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableDeletedAt(t *time.Time) *GitProjectCreate {
	if t != nil {
		gpc.SetDeletedAt(*t)
	}
	return gpc
}

// SetName sets the "name" field.
func (gpc *GitProjectCreate) SetName(s string) *GitProjectCreate {
	gpc.mutation.SetName(s)
	return gpc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableName(s *string) *GitProjectCreate {
	if s != nil {
		gpc.SetName(*s)
	}
	return gpc
}

// SetDefaultBranch sets the "default_branch" field.
func (gpc *GitProjectCreate) SetDefaultBranch(s string) *GitProjectCreate {
	gpc.mutation.SetDefaultBranch(s)
	return gpc
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableDefaultBranch(s *string) *GitProjectCreate {
	if s != nil {
		gpc.SetDefaultBranch(*s)
	}
	return gpc
}

// SetGitProjectID sets the "git_project_id" field.
func (gpc *GitProjectCreate) SetGitProjectID(i int) *GitProjectCreate {
	gpc.mutation.SetGitProjectID(i)
	return gpc
}

// SetEnabled sets the "enabled" field.
func (gpc *GitProjectCreate) SetEnabled(b bool) *GitProjectCreate {
	gpc.mutation.SetEnabled(b)
	return gpc
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableEnabled(b *bool) *GitProjectCreate {
	if b != nil {
		gpc.SetEnabled(*b)
	}
	return gpc
}

// SetGlobalEnabled sets the "global_enabled" field.
func (gpc *GitProjectCreate) SetGlobalEnabled(b bool) *GitProjectCreate {
	gpc.mutation.SetGlobalEnabled(b)
	return gpc
}

// SetNillableGlobalEnabled sets the "global_enabled" field if the given value is not nil.
func (gpc *GitProjectCreate) SetNillableGlobalEnabled(b *bool) *GitProjectCreate {
	if b != nil {
		gpc.SetGlobalEnabled(*b)
	}
	return gpc
}

// SetGlobalConfig sets the "global_config" field.
func (gpc *GitProjectCreate) SetGlobalConfig(m *mars.Config) *GitProjectCreate {
	gpc.mutation.SetGlobalConfig(m)
	return gpc
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (gpc *GitProjectCreate) AddChangelogIDs(ids ...int) *GitProjectCreate {
	gpc.mutation.AddChangelogIDs(ids...)
	return gpc
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (gpc *GitProjectCreate) AddChangelogs(c ...*Changelog) *GitProjectCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gpc.AddChangelogIDs(ids...)
}

// Mutation returns the GitProjectMutation object of the builder.
func (gpc *GitProjectCreate) Mutation() *GitProjectMutation {
	return gpc.mutation
}

// Save creates the GitProject in the database.
func (gpc *GitProjectCreate) Save(ctx context.Context) (*GitProject, error) {
	if err := gpc.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gpc.sqlSave, gpc.mutation, gpc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (gpc *GitProjectCreate) SaveX(ctx context.Context) *GitProject {
	v, err := gpc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpc *GitProjectCreate) Exec(ctx context.Context) error {
	_, err := gpc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpc *GitProjectCreate) ExecX(ctx context.Context) {
	if err := gpc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpc *GitProjectCreate) defaults() error {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		if gitproject.DefaultCreatedAt == nil {
			return fmt.Errorf("ent: uninitialized gitproject.DefaultCreatedAt (forgotten import ent/runtime?)")
		}
		v := gitproject.DefaultCreatedAt()
		gpc.mutation.SetCreatedAt(v)
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		if gitproject.DefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gitproject.DefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gitproject.DefaultUpdatedAt()
		gpc.mutation.SetUpdatedAt(v)
	}
	if _, ok := gpc.mutation.Name(); !ok {
		v := gitproject.DefaultName
		gpc.mutation.SetName(v)
	}
	if _, ok := gpc.mutation.DefaultBranch(); !ok {
		v := gitproject.DefaultDefaultBranch
		gpc.mutation.SetDefaultBranch(v)
	}
	if _, ok := gpc.mutation.Enabled(); !ok {
		v := gitproject.DefaultEnabled
		gpc.mutation.SetEnabled(v)
	}
	if _, ok := gpc.mutation.GlobalEnabled(); !ok {
		v := gitproject.DefaultGlobalEnabled
		gpc.mutation.SetGlobalEnabled(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gpc *GitProjectCreate) check() error {
	if _, ok := gpc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "GitProject.created_at"`)}
	}
	if _, ok := gpc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "GitProject.updated_at"`)}
	}
	if _, ok := gpc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "GitProject.name"`)}
	}
	if v, ok := gpc.mutation.Name(); ok {
		if err := gitproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GitProject.name": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.DefaultBranch(); !ok {
		return &ValidationError{Name: "default_branch", err: errors.New(`ent: missing required field "GitProject.default_branch"`)}
	}
	if v, ok := gpc.mutation.DefaultBranch(); ok {
		if err := gitproject.DefaultBranchValidator(v); err != nil {
			return &ValidationError{Name: "default_branch", err: fmt.Errorf(`ent: validator failed for field "GitProject.default_branch": %w`, err)}
		}
	}
	if _, ok := gpc.mutation.GitProjectID(); !ok {
		return &ValidationError{Name: "git_project_id", err: errors.New(`ent: missing required field "GitProject.git_project_id"`)}
	}
	if _, ok := gpc.mutation.Enabled(); !ok {
		return &ValidationError{Name: "enabled", err: errors.New(`ent: missing required field "GitProject.enabled"`)}
	}
	if _, ok := gpc.mutation.GlobalEnabled(); !ok {
		return &ValidationError{Name: "global_enabled", err: errors.New(`ent: missing required field "GitProject.global_enabled"`)}
	}
	if v, ok := gpc.mutation.GlobalConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "global_config", err: fmt.Errorf(`ent: validator failed for field "GitProject.global_config": %w`, err)}
		}
	}
	return nil
}

func (gpc *GitProjectCreate) sqlSave(ctx context.Context) (*GitProject, error) {
	if err := gpc.check(); err != nil {
		return nil, err
	}
	_node, _spec := gpc.createSpec()
	if err := sqlgraph.CreateNode(ctx, gpc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	gpc.mutation.id = &_node.ID
	gpc.mutation.done = true
	return _node, nil
}

func (gpc *GitProjectCreate) createSpec() (*GitProject, *sqlgraph.CreateSpec) {
	var (
		_node = &GitProject{config: gpc.config}
		_spec = sqlgraph.NewCreateSpec(gitproject.Table, sqlgraph.NewFieldSpec(gitproject.FieldID, field.TypeInt))
	)
	_spec.OnConflict = gpc.conflict
	if value, ok := gpc.mutation.CreatedAt(); ok {
		_spec.SetField(gitproject.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := gpc.mutation.UpdatedAt(); ok {
		_spec.SetField(gitproject.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := gpc.mutation.DeletedAt(); ok {
		_spec.SetField(gitproject.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = &value
	}
	if value, ok := gpc.mutation.Name(); ok {
		_spec.SetField(gitproject.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := gpc.mutation.DefaultBranch(); ok {
		_spec.SetField(gitproject.FieldDefaultBranch, field.TypeString, value)
		_node.DefaultBranch = value
	}
	if value, ok := gpc.mutation.GitProjectID(); ok {
		_spec.SetField(gitproject.FieldGitProjectID, field.TypeInt, value)
		_node.GitProjectID = value
	}
	if value, ok := gpc.mutation.Enabled(); ok {
		_spec.SetField(gitproject.FieldEnabled, field.TypeBool, value)
		_node.Enabled = value
	}
	if value, ok := gpc.mutation.GlobalEnabled(); ok {
		_spec.SetField(gitproject.FieldGlobalEnabled, field.TypeBool, value)
		_node.GlobalEnabled = value
	}
	if value, ok := gpc.mutation.GlobalConfig(); ok {
		_spec.SetField(gitproject.FieldGlobalConfig, field.TypeJSON, value)
		_node.GlobalConfig = value
	}
	if nodes := gpc.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GitProject.Create().
//		SetCreatedAt(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GitProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gpc *GitProjectCreate) OnConflict(opts ...sql.ConflictOption) *GitProjectUpsertOne {
	gpc.conflict = opts
	return &GitProjectUpsertOne{
		create: gpc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GitProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpc *GitProjectCreate) OnConflictColumns(columns ...string) *GitProjectUpsertOne {
	gpc.conflict = append(gpc.conflict, sql.ConflictColumns(columns...))
	return &GitProjectUpsertOne{
		create: gpc,
	}
}

type (
	// GitProjectUpsertOne is the builder for "upsert"-ing
	//  one GitProject node.
	GitProjectUpsertOne struct {
		create *GitProjectCreate
	}

	// GitProjectUpsert is the "OnConflict" setter.
	GitProjectUpsert struct {
		*sql.UpdateSet
	}
)

// SetUpdatedAt sets the "updated_at" field.
func (u *GitProjectUpsert) SetUpdatedAt(v time.Time) *GitProjectUpsert {
	u.Set(gitproject.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateUpdatedAt() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldUpdatedAt)
	return u
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GitProjectUpsert) SetDeletedAt(v time.Time) *GitProjectUpsert {
	u.Set(gitproject.FieldDeletedAt, v)
	return u
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateDeletedAt() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldDeletedAt)
	return u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GitProjectUpsert) ClearDeletedAt() *GitProjectUpsert {
	u.SetNull(gitproject.FieldDeletedAt)
	return u
}

// SetName sets the "name" field.
func (u *GitProjectUpsert) SetName(v string) *GitProjectUpsert {
	u.Set(gitproject.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateName() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldName)
	return u
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GitProjectUpsert) SetDefaultBranch(v string) *GitProjectUpsert {
	u.Set(gitproject.FieldDefaultBranch, v)
	return u
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateDefaultBranch() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldDefaultBranch)
	return u
}

// SetGitProjectID sets the "git_project_id" field.
func (u *GitProjectUpsert) SetGitProjectID(v int) *GitProjectUpsert {
	u.Set(gitproject.FieldGitProjectID, v)
	return u
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateGitProjectID() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldGitProjectID)
	return u
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *GitProjectUpsert) AddGitProjectID(v int) *GitProjectUpsert {
	u.Add(gitproject.FieldGitProjectID, v)
	return u
}

// SetEnabled sets the "enabled" field.
func (u *GitProjectUpsert) SetEnabled(v bool) *GitProjectUpsert {
	u.Set(gitproject.FieldEnabled, v)
	return u
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateEnabled() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldEnabled)
	return u
}

// SetGlobalEnabled sets the "global_enabled" field.
func (u *GitProjectUpsert) SetGlobalEnabled(v bool) *GitProjectUpsert {
	u.Set(gitproject.FieldGlobalEnabled, v)
	return u
}

// UpdateGlobalEnabled sets the "global_enabled" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateGlobalEnabled() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldGlobalEnabled)
	return u
}

// SetGlobalConfig sets the "global_config" field.
func (u *GitProjectUpsert) SetGlobalConfig(v *mars.Config) *GitProjectUpsert {
	u.Set(gitproject.FieldGlobalConfig, v)
	return u
}

// UpdateGlobalConfig sets the "global_config" field to the value that was provided on create.
func (u *GitProjectUpsert) UpdateGlobalConfig() *GitProjectUpsert {
	u.SetExcluded(gitproject.FieldGlobalConfig)
	return u
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (u *GitProjectUpsert) ClearGlobalConfig() *GitProjectUpsert {
	u.SetNull(gitproject.FieldGlobalConfig)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.GitProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GitProjectUpsertOne) UpdateNewValues() *GitProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(gitproject.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GitProject.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *GitProjectUpsertOne) Ignore() *GitProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GitProjectUpsertOne) DoNothing() *GitProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GitProjectCreate.OnConflict
// documentation for more info.
func (u *GitProjectUpsertOne) Update(set func(*GitProjectUpsert)) *GitProjectUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GitProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GitProjectUpsertOne) SetUpdatedAt(v time.Time) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateUpdatedAt() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GitProjectUpsertOne) SetDeletedAt(v time.Time) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateDeletedAt() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GitProjectUpsertOne) ClearDeletedAt() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *GitProjectUpsertOne) SetName(v string) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateName() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateName()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GitProjectUpsertOne) SetDefaultBranch(v string) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateDefaultBranch() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetGitProjectID sets the "git_project_id" field.
func (u *GitProjectUpsertOne) SetGitProjectID(v int) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGitProjectID(v)
	})
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *GitProjectUpsertOne) AddGitProjectID(v int) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.AddGitProjectID(v)
	})
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateGitProjectID() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGitProjectID()
	})
}

// SetEnabled sets the "enabled" field.
func (u *GitProjectUpsertOne) SetEnabled(v bool) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateEnabled() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateEnabled()
	})
}

// SetGlobalEnabled sets the "global_enabled" field.
func (u *GitProjectUpsertOne) SetGlobalEnabled(v bool) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGlobalEnabled(v)
	})
}

// UpdateGlobalEnabled sets the "global_enabled" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateGlobalEnabled() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGlobalEnabled()
	})
}

// SetGlobalConfig sets the "global_config" field.
func (u *GitProjectUpsertOne) SetGlobalConfig(v *mars.Config) *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGlobalConfig(v)
	})
}

// UpdateGlobalConfig sets the "global_config" field to the value that was provided on create.
func (u *GitProjectUpsertOne) UpdateGlobalConfig() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGlobalConfig()
	})
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (u *GitProjectUpsertOne) ClearGlobalConfig() *GitProjectUpsertOne {
	return u.Update(func(s *GitProjectUpsert) {
		s.ClearGlobalConfig()
	})
}

// Exec executes the query.
func (u *GitProjectUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GitProjectCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GitProjectUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *GitProjectUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *GitProjectUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// GitProjectCreateBulk is the builder for creating many GitProject entities in bulk.
type GitProjectCreateBulk struct {
	config
	err      error
	builders []*GitProjectCreate
	conflict []sql.ConflictOption
}

// Save creates the GitProject entities in the database.
func (gpcb *GitProjectCreateBulk) Save(ctx context.Context) ([]*GitProject, error) {
	if gpcb.err != nil {
		return nil, gpcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(gpcb.builders))
	nodes := make([]*GitProject, len(gpcb.builders))
	mutators := make([]Mutator, len(gpcb.builders))
	for i := range gpcb.builders {
		func(i int, root context.Context) {
			builder := gpcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GitProjectMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, gpcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = gpcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, gpcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, gpcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (gpcb *GitProjectCreateBulk) SaveX(ctx context.Context) []*GitProject {
	v, err := gpcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (gpcb *GitProjectCreateBulk) Exec(ctx context.Context) error {
	_, err := gpcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpcb *GitProjectCreateBulk) ExecX(ctx context.Context) {
	if err := gpcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.GitProject.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.GitProjectUpsert) {
//			SetCreatedAt(v+v).
//		}).
//		Exec(ctx)
func (gpcb *GitProjectCreateBulk) OnConflict(opts ...sql.ConflictOption) *GitProjectUpsertBulk {
	gpcb.conflict = opts
	return &GitProjectUpsertBulk{
		create: gpcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.GitProject.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (gpcb *GitProjectCreateBulk) OnConflictColumns(columns ...string) *GitProjectUpsertBulk {
	gpcb.conflict = append(gpcb.conflict, sql.ConflictColumns(columns...))
	return &GitProjectUpsertBulk{
		create: gpcb,
	}
}

// GitProjectUpsertBulk is the builder for "upsert"-ing
// a bulk of GitProject nodes.
type GitProjectUpsertBulk struct {
	create *GitProjectCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.GitProject.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *GitProjectUpsertBulk) UpdateNewValues() *GitProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(gitproject.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.GitProject.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *GitProjectUpsertBulk) Ignore() *GitProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *GitProjectUpsertBulk) DoNothing() *GitProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the GitProjectCreateBulk.OnConflict
// documentation for more info.
func (u *GitProjectUpsertBulk) Update(set func(*GitProjectUpsert)) *GitProjectUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&GitProjectUpsert{UpdateSet: update})
	}))
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *GitProjectUpsertBulk) SetUpdatedAt(v time.Time) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateUpdatedAt() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetDeletedAt sets the "deleted_at" field.
func (u *GitProjectUpsertBulk) SetDeletedAt(v time.Time) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetDeletedAt(v)
	})
}

// UpdateDeletedAt sets the "deleted_at" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateDeletedAt() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateDeletedAt()
	})
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (u *GitProjectUpsertBulk) ClearDeletedAt() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.ClearDeletedAt()
	})
}

// SetName sets the "name" field.
func (u *GitProjectUpsertBulk) SetName(v string) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateName() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateName()
	})
}

// SetDefaultBranch sets the "default_branch" field.
func (u *GitProjectUpsertBulk) SetDefaultBranch(v string) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetDefaultBranch(v)
	})
}

// UpdateDefaultBranch sets the "default_branch" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateDefaultBranch() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateDefaultBranch()
	})
}

// SetGitProjectID sets the "git_project_id" field.
func (u *GitProjectUpsertBulk) SetGitProjectID(v int) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGitProjectID(v)
	})
}

// AddGitProjectID adds v to the "git_project_id" field.
func (u *GitProjectUpsertBulk) AddGitProjectID(v int) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.AddGitProjectID(v)
	})
}

// UpdateGitProjectID sets the "git_project_id" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateGitProjectID() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGitProjectID()
	})
}

// SetEnabled sets the "enabled" field.
func (u *GitProjectUpsertBulk) SetEnabled(v bool) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetEnabled(v)
	})
}

// UpdateEnabled sets the "enabled" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateEnabled() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateEnabled()
	})
}

// SetGlobalEnabled sets the "global_enabled" field.
func (u *GitProjectUpsertBulk) SetGlobalEnabled(v bool) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGlobalEnabled(v)
	})
}

// UpdateGlobalEnabled sets the "global_enabled" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateGlobalEnabled() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGlobalEnabled()
	})
}

// SetGlobalConfig sets the "global_config" field.
func (u *GitProjectUpsertBulk) SetGlobalConfig(v *mars.Config) *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.SetGlobalConfig(v)
	})
}

// UpdateGlobalConfig sets the "global_config" field to the value that was provided on create.
func (u *GitProjectUpsertBulk) UpdateGlobalConfig() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.UpdateGlobalConfig()
	})
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (u *GitProjectUpsertBulk) ClearGlobalConfig() *GitProjectUpsertBulk {
	return u.Update(func(s *GitProjectUpsert) {
		s.ClearGlobalConfig()
	})
}

// Exec executes the query.
func (u *GitProjectUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the GitProjectCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for GitProjectCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *GitProjectUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
