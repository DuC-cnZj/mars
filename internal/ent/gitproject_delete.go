// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v4/internal/ent/gitproject"
	"github.com/duc-cnzj/mars/v4/internal/ent/predicate"
)

// GitProjectDelete is the builder for deleting a GitProject entity.
type GitProjectDelete struct {
	config
	hooks    []Hook
	mutation *GitProjectMutation
}

// Where appends a list predicates to the GitProjectDelete builder.
func (gpd *GitProjectDelete) Where(ps ...predicate.GitProject) *GitProjectDelete {
	gpd.mutation.Where(ps...)
	return gpd
}

// Exec executes the deletion query and returns how many vertices were deleted.
func (gpd *GitProjectDelete) Exec(ctx context.Context) (int, error) {
	return withHooks(ctx, gpd.sqlExec, gpd.mutation, gpd.hooks)
}

// ExecX is like Exec, but panics if an error occurs.
func (gpd *GitProjectDelete) ExecX(ctx context.Context) int {
	n, err := gpd.Exec(ctx)
	if err != nil {
		panic(err)
	}
	return n
}

func (gpd *GitProjectDelete) sqlExec(ctx context.Context) (int, error) {
	_spec := sqlgraph.NewDeleteSpec(gitproject.Table, sqlgraph.NewFieldSpec(gitproject.FieldID, field.TypeInt))
	if ps := gpd.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	affected, err := sqlgraph.DeleteNodes(ctx, gpd.driver, _spec)
	if err != nil && sqlgraph.IsConstraintError(err) {
		err = &ConstraintError{msg: err.Error(), wrap: err}
	}
	gpd.mutation.done = true
	return affected, err
}

// GitProjectDeleteOne is the builder for deleting a single GitProject entity.
type GitProjectDeleteOne struct {
	gpd *GitProjectDelete
}

// Where appends a list predicates to the GitProjectDelete builder.
func (gpdo *GitProjectDeleteOne) Where(ps ...predicate.GitProject) *GitProjectDeleteOne {
	gpdo.gpd.mutation.Where(ps...)
	return gpdo
}

// Exec executes the deletion query.
func (gpdo *GitProjectDeleteOne) Exec(ctx context.Context) error {
	n, err := gpdo.gpd.Exec(ctx)
	switch {
	case err != nil:
		return err
	case n == 0:
		return &NotFoundError{gitproject.Label}
	default:
		return nil
	}
}

// ExecX is like Exec, but panics if an error occurs.
func (gpdo *GitProjectDeleteOne) ExecX(ctx context.Context) {
	if err := gpdo.Exec(ctx); err != nil {
		panic(err)
	}
}
