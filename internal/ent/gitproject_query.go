// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/v4/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v4/internal/ent/gitproject"
	"github.com/duc-cnzj/mars/v4/internal/ent/predicate"
)

// GitProjectQuery is the builder for querying GitProject entities.
type GitProjectQuery struct {
	config
	ctx            *QueryContext
	order          []gitproject.OrderOption
	inters         []Interceptor
	predicates     []predicate.GitProject
	withChangelogs *ChangelogQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the GitProjectQuery builder.
func (gpq *GitProjectQuery) Where(ps ...predicate.GitProject) *GitProjectQuery {
	gpq.predicates = append(gpq.predicates, ps...)
	return gpq
}

// Limit the number of records to be returned by this query.
func (gpq *GitProjectQuery) Limit(limit int) *GitProjectQuery {
	gpq.ctx.Limit = &limit
	return gpq
}

// Offset to start from.
func (gpq *GitProjectQuery) Offset(offset int) *GitProjectQuery {
	gpq.ctx.Offset = &offset
	return gpq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (gpq *GitProjectQuery) Unique(unique bool) *GitProjectQuery {
	gpq.ctx.Unique = &unique
	return gpq
}

// Order specifies how the records should be ordered.
func (gpq *GitProjectQuery) Order(o ...gitproject.OrderOption) *GitProjectQuery {
	gpq.order = append(gpq.order, o...)
	return gpq
}

// QueryChangelogs chains the current query on the "changelogs" edge.
func (gpq *GitProjectQuery) QueryChangelogs() *ChangelogQuery {
	query := (&ChangelogClient{config: gpq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := gpq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := gpq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(gitproject.Table, gitproject.FieldID, selector),
			sqlgraph.To(changelog.Table, changelog.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, gitproject.ChangelogsTable, gitproject.ChangelogsColumn),
		)
		fromU = sqlgraph.SetNeighbors(gpq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first GitProject entity from the query.
// Returns a *NotFoundError when no GitProject was found.
func (gpq *GitProjectQuery) First(ctx context.Context) (*GitProject, error) {
	nodes, err := gpq.Limit(1).All(setContextOp(ctx, gpq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{gitproject.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (gpq *GitProjectQuery) FirstX(ctx context.Context) *GitProject {
	node, err := gpq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first GitProject ID from the query.
// Returns a *NotFoundError when no GitProject ID was found.
func (gpq *GitProjectQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gpq.Limit(1).IDs(setContextOp(ctx, gpq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{gitproject.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (gpq *GitProjectQuery) FirstIDX(ctx context.Context) int {
	id, err := gpq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single GitProject entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one GitProject entity is found.
// Returns a *NotFoundError when no GitProject entities are found.
func (gpq *GitProjectQuery) Only(ctx context.Context) (*GitProject, error) {
	nodes, err := gpq.Limit(2).All(setContextOp(ctx, gpq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{gitproject.Label}
	default:
		return nil, &NotSingularError{gitproject.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (gpq *GitProjectQuery) OnlyX(ctx context.Context) *GitProject {
	node, err := gpq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only GitProject ID in the query.
// Returns a *NotSingularError when more than one GitProject ID is found.
// Returns a *NotFoundError when no entities are found.
func (gpq *GitProjectQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = gpq.Limit(2).IDs(setContextOp(ctx, gpq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{gitproject.Label}
	default:
		err = &NotSingularError{gitproject.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (gpq *GitProjectQuery) OnlyIDX(ctx context.Context) int {
	id, err := gpq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of GitProjects.
func (gpq *GitProjectQuery) All(ctx context.Context) ([]*GitProject, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryAll)
	if err := gpq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*GitProject, *GitProjectQuery]()
	return withInterceptors[[]*GitProject](ctx, gpq, qr, gpq.inters)
}

// AllX is like All, but panics if an error occurs.
func (gpq *GitProjectQuery) AllX(ctx context.Context) []*GitProject {
	nodes, err := gpq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of GitProject IDs.
func (gpq *GitProjectQuery) IDs(ctx context.Context) (ids []int, err error) {
	if gpq.ctx.Unique == nil && gpq.path != nil {
		gpq.Unique(true)
	}
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryIDs)
	if err = gpq.Select(gitproject.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (gpq *GitProjectQuery) IDsX(ctx context.Context) []int {
	ids, err := gpq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (gpq *GitProjectQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryCount)
	if err := gpq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, gpq, querierCount[*GitProjectQuery](), gpq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (gpq *GitProjectQuery) CountX(ctx context.Context) int {
	count, err := gpq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (gpq *GitProjectQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, gpq.ctx, ent.OpQueryExist)
	switch _, err := gpq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (gpq *GitProjectQuery) ExistX(ctx context.Context) bool {
	exist, err := gpq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the GitProjectQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (gpq *GitProjectQuery) Clone() *GitProjectQuery {
	if gpq == nil {
		return nil
	}
	return &GitProjectQuery{
		config:         gpq.config,
		ctx:            gpq.ctx.Clone(),
		order:          append([]gitproject.OrderOption{}, gpq.order...),
		inters:         append([]Interceptor{}, gpq.inters...),
		predicates:     append([]predicate.GitProject{}, gpq.predicates...),
		withChangelogs: gpq.withChangelogs.Clone(),
		// clone intermediate query.
		sql:  gpq.sql.Clone(),
		path: gpq.path,
	}
}

// WithChangelogs tells the query-builder to eager-load the nodes that are connected to
// the "changelogs" edge. The optional arguments are used to configure the query builder of the edge.
func (gpq *GitProjectQuery) WithChangelogs(opts ...func(*ChangelogQuery)) *GitProjectQuery {
	query := (&ChangelogClient{config: gpq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	gpq.withChangelogs = query
	return gpq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.GitProject.Query().
//		GroupBy(gitproject.FieldCreatedAt).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (gpq *GitProjectQuery) GroupBy(field string, fields ...string) *GitProjectGroupBy {
	gpq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &GitProjectGroupBy{build: gpq}
	grbuild.flds = &gpq.ctx.Fields
	grbuild.label = gitproject.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		CreatedAt time.Time `json:"created_at,omitempty"`
//	}
//
//	client.GitProject.Query().
//		Select(gitproject.FieldCreatedAt).
//		Scan(ctx, &v)
func (gpq *GitProjectQuery) Select(fields ...string) *GitProjectSelect {
	gpq.ctx.Fields = append(gpq.ctx.Fields, fields...)
	sbuild := &GitProjectSelect{GitProjectQuery: gpq}
	sbuild.label = gitproject.Label
	sbuild.flds, sbuild.scan = &gpq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a GitProjectSelect configured with the given aggregations.
func (gpq *GitProjectQuery) Aggregate(fns ...AggregateFunc) *GitProjectSelect {
	return gpq.Select().Aggregate(fns...)
}

func (gpq *GitProjectQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range gpq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, gpq); err != nil {
				return err
			}
		}
	}
	for _, f := range gpq.ctx.Fields {
		if !gitproject.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if gpq.path != nil {
		prev, err := gpq.path(ctx)
		if err != nil {
			return err
		}
		gpq.sql = prev
	}
	return nil
}

func (gpq *GitProjectQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*GitProject, error) {
	var (
		nodes       = []*GitProject{}
		_spec       = gpq.querySpec()
		loadedTypes = [1]bool{
			gpq.withChangelogs != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*GitProject).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &GitProject{config: gpq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, gpq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := gpq.withChangelogs; query != nil {
		if err := gpq.loadChangelogs(ctx, query, nodes,
			func(n *GitProject) { n.Edges.Changelogs = []*Changelog{} },
			func(n *GitProject, e *Changelog) { n.Edges.Changelogs = append(n.Edges.Changelogs, e) }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (gpq *GitProjectQuery) loadChangelogs(ctx context.Context, query *ChangelogQuery, nodes []*GitProject, init func(*GitProject), assign func(*GitProject, *Changelog)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*GitProject)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	if len(query.ctx.Fields) > 0 {
		query.ctx.AppendFieldOnce(changelog.FieldGitProjectID)
	}
	query.Where(predicate.Changelog(func(s *sql.Selector) {
		s.Where(sql.InValues(s.C(gitproject.ChangelogsColumn), fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.GitProjectID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected referenced foreign-key "git_project_id" returned %v for node %v`, fk, n.ID)
		}
		assign(node, n)
	}
	return nil
}

func (gpq *GitProjectQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := gpq.querySpec()
	_spec.Node.Columns = gpq.ctx.Fields
	if len(gpq.ctx.Fields) > 0 {
		_spec.Unique = gpq.ctx.Unique != nil && *gpq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, gpq.driver, _spec)
}

func (gpq *GitProjectQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(gitproject.Table, gitproject.Columns, sqlgraph.NewFieldSpec(gitproject.FieldID, field.TypeInt))
	_spec.From = gpq.sql
	if unique := gpq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if gpq.path != nil {
		_spec.Unique = true
	}
	if fields := gpq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gitproject.FieldID)
		for i := range fields {
			if fields[i] != gitproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := gpq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := gpq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := gpq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := gpq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (gpq *GitProjectQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(gpq.driver.Dialect())
	t1 := builder.Table(gitproject.Table)
	columns := gpq.ctx.Fields
	if len(columns) == 0 {
		columns = gitproject.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if gpq.sql != nil {
		selector = gpq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if gpq.ctx.Unique != nil && *gpq.ctx.Unique {
		selector.Distinct()
	}
	for _, p := range gpq.predicates {
		p(selector)
	}
	for _, p := range gpq.order {
		p(selector)
	}
	if offset := gpq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := gpq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// GitProjectGroupBy is the group-by builder for GitProject entities.
type GitProjectGroupBy struct {
	selector
	build *GitProjectQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (gpgb *GitProjectGroupBy) Aggregate(fns ...AggregateFunc) *GitProjectGroupBy {
	gpgb.fns = append(gpgb.fns, fns...)
	return gpgb
}

// Scan applies the selector query and scans the result into the given value.
func (gpgb *GitProjectGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gpgb.build.ctx, ent.OpQueryGroupBy)
	if err := gpgb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GitProjectQuery, *GitProjectGroupBy](ctx, gpgb.build, gpgb, gpgb.build.inters, v)
}

func (gpgb *GitProjectGroupBy) sqlScan(ctx context.Context, root *GitProjectQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(gpgb.fns))
	for _, fn := range gpgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*gpgb.flds)+len(gpgb.fns))
		for _, f := range *gpgb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*gpgb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gpgb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// GitProjectSelect is the builder for selecting fields of GitProject entities.
type GitProjectSelect struct {
	*GitProjectQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (gps *GitProjectSelect) Aggregate(fns ...AggregateFunc) *GitProjectSelect {
	gps.fns = append(gps.fns, fns...)
	return gps
}

// Scan applies the selector query and scans the result into the given value.
func (gps *GitProjectSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, gps.ctx, ent.OpQuerySelect)
	if err := gps.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*GitProjectQuery, *GitProjectSelect](ctx, gps.GitProjectQuery, gps, gps.inters, v)
}

func (gps *GitProjectSelect) sqlScan(ctx context.Context, root *GitProjectQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(gps.fns))
	for _, fn := range gps.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*gps.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := gps.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
