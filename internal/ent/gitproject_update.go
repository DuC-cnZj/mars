// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/duc-cnzj/mars/api/v4/mars"
	"github.com/duc-cnzj/mars/v4/internal/ent/changelog"
	"github.com/duc-cnzj/mars/v4/internal/ent/gitproject"
	"github.com/duc-cnzj/mars/v4/internal/ent/predicate"
)

// GitProjectUpdate is the builder for updating GitProject entities.
type GitProjectUpdate struct {
	config
	hooks    []Hook
	mutation *GitProjectMutation
}

// Where appends a list predicates to the GitProjectUpdate builder.
func (gpu *GitProjectUpdate) Where(ps ...predicate.GitProject) *GitProjectUpdate {
	gpu.mutation.Where(ps...)
	return gpu
}

// SetUpdatedAt sets the "updated_at" field.
func (gpu *GitProjectUpdate) SetUpdatedAt(t time.Time) *GitProjectUpdate {
	gpu.mutation.SetUpdatedAt(t)
	return gpu
}

// SetDeletedAt sets the "deleted_at" field.
func (gpu *GitProjectUpdate) SetDeletedAt(t time.Time) *GitProjectUpdate {
	gpu.mutation.SetDeletedAt(t)
	return gpu
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableDeletedAt(t *time.Time) *GitProjectUpdate {
	if t != nil {
		gpu.SetDeletedAt(*t)
	}
	return gpu
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gpu *GitProjectUpdate) ClearDeletedAt() *GitProjectUpdate {
	gpu.mutation.ClearDeletedAt()
	return gpu
}

// SetName sets the "name" field.
func (gpu *GitProjectUpdate) SetName(s string) *GitProjectUpdate {
	gpu.mutation.SetName(s)
	return gpu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableName(s *string) *GitProjectUpdate {
	if s != nil {
		gpu.SetName(*s)
	}
	return gpu
}

// SetDefaultBranch sets the "default_branch" field.
func (gpu *GitProjectUpdate) SetDefaultBranch(s string) *GitProjectUpdate {
	gpu.mutation.SetDefaultBranch(s)
	return gpu
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableDefaultBranch(s *string) *GitProjectUpdate {
	if s != nil {
		gpu.SetDefaultBranch(*s)
	}
	return gpu
}

// SetGitProjectID sets the "git_project_id" field.
func (gpu *GitProjectUpdate) SetGitProjectID(i int) *GitProjectUpdate {
	gpu.mutation.ResetGitProjectID()
	gpu.mutation.SetGitProjectID(i)
	return gpu
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableGitProjectID(i *int) *GitProjectUpdate {
	if i != nil {
		gpu.SetGitProjectID(*i)
	}
	return gpu
}

// AddGitProjectID adds i to the "git_project_id" field.
func (gpu *GitProjectUpdate) AddGitProjectID(i int) *GitProjectUpdate {
	gpu.mutation.AddGitProjectID(i)
	return gpu
}

// SetEnabled sets the "enabled" field.
func (gpu *GitProjectUpdate) SetEnabled(b bool) *GitProjectUpdate {
	gpu.mutation.SetEnabled(b)
	return gpu
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableEnabled(b *bool) *GitProjectUpdate {
	if b != nil {
		gpu.SetEnabled(*b)
	}
	return gpu
}

// SetGlobalEnabled sets the "global_enabled" field.
func (gpu *GitProjectUpdate) SetGlobalEnabled(b bool) *GitProjectUpdate {
	gpu.mutation.SetGlobalEnabled(b)
	return gpu
}

// SetNillableGlobalEnabled sets the "global_enabled" field if the given value is not nil.
func (gpu *GitProjectUpdate) SetNillableGlobalEnabled(b *bool) *GitProjectUpdate {
	if b != nil {
		gpu.SetGlobalEnabled(*b)
	}
	return gpu
}

// SetGlobalConfig sets the "global_config" field.
func (gpu *GitProjectUpdate) SetGlobalConfig(m *mars.Config) *GitProjectUpdate {
	gpu.mutation.SetGlobalConfig(m)
	return gpu
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (gpu *GitProjectUpdate) ClearGlobalConfig() *GitProjectUpdate {
	gpu.mutation.ClearGlobalConfig()
	return gpu
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (gpu *GitProjectUpdate) AddChangelogIDs(ids ...int) *GitProjectUpdate {
	gpu.mutation.AddChangelogIDs(ids...)
	return gpu
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (gpu *GitProjectUpdate) AddChangelogs(c ...*Changelog) *GitProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gpu.AddChangelogIDs(ids...)
}

// Mutation returns the GitProjectMutation object of the builder.
func (gpu *GitProjectUpdate) Mutation() *GitProjectMutation {
	return gpu.mutation
}

// ClearChangelogs clears all "changelogs" edges to the Changelog entity.
func (gpu *GitProjectUpdate) ClearChangelogs() *GitProjectUpdate {
	gpu.mutation.ClearChangelogs()
	return gpu
}

// RemoveChangelogIDs removes the "changelogs" edge to Changelog entities by IDs.
func (gpu *GitProjectUpdate) RemoveChangelogIDs(ids ...int) *GitProjectUpdate {
	gpu.mutation.RemoveChangelogIDs(ids...)
	return gpu
}

// RemoveChangelogs removes "changelogs" edges to Changelog entities.
func (gpu *GitProjectUpdate) RemoveChangelogs(c ...*Changelog) *GitProjectUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gpu.RemoveChangelogIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (gpu *GitProjectUpdate) Save(ctx context.Context) (int, error) {
	if err := gpu.defaults(); err != nil {
		return 0, err
	}
	return withHooks(ctx, gpu.sqlSave, gpu.mutation, gpu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpu *GitProjectUpdate) SaveX(ctx context.Context) int {
	affected, err := gpu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (gpu *GitProjectUpdate) Exec(ctx context.Context) error {
	_, err := gpu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpu *GitProjectUpdate) ExecX(ctx context.Context) {
	if err := gpu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpu *GitProjectUpdate) defaults() error {
	if _, ok := gpu.mutation.UpdatedAt(); !ok {
		if gitproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gitproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gitproject.UpdateDefaultUpdatedAt()
		gpu.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gpu *GitProjectUpdate) check() error {
	if v, ok := gpu.mutation.Name(); ok {
		if err := gitproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GitProject.name": %w`, err)}
		}
	}
	if v, ok := gpu.mutation.DefaultBranch(); ok {
		if err := gitproject.DefaultBranchValidator(v); err != nil {
			return &ValidationError{Name: "default_branch", err: fmt.Errorf(`ent: validator failed for field "GitProject.default_branch": %w`, err)}
		}
	}
	if v, ok := gpu.mutation.GlobalConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "global_config", err: fmt.Errorf(`ent: validator failed for field "GitProject.global_config": %w`, err)}
		}
	}
	return nil
}

func (gpu *GitProjectUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := gpu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(gitproject.Table, gitproject.Columns, sqlgraph.NewFieldSpec(gitproject.FieldID, field.TypeInt))
	if ps := gpu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpu.mutation.UpdatedAt(); ok {
		_spec.SetField(gitproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gpu.mutation.DeletedAt(); ok {
		_spec.SetField(gitproject.FieldDeletedAt, field.TypeTime, value)
	}
	if gpu.mutation.DeletedAtCleared() {
		_spec.ClearField(gitproject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gpu.mutation.Name(); ok {
		_spec.SetField(gitproject.FieldName, field.TypeString, value)
	}
	if value, ok := gpu.mutation.DefaultBranch(); ok {
		_spec.SetField(gitproject.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := gpu.mutation.GitProjectID(); ok {
		_spec.SetField(gitproject.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := gpu.mutation.AddedGitProjectID(); ok {
		_spec.AddField(gitproject.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := gpu.mutation.Enabled(); ok {
		_spec.SetField(gitproject.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := gpu.mutation.GlobalEnabled(); ok {
		_spec.SetField(gitproject.FieldGlobalEnabled, field.TypeBool, value)
	}
	if value, ok := gpu.mutation.GlobalConfig(); ok {
		_spec.SetField(gitproject.FieldGlobalConfig, field.TypeJSON, value)
	}
	if gpu.mutation.GlobalConfigCleared() {
		_spec.ClearField(gitproject.FieldGlobalConfig, field.TypeJSON)
	}
	if gpu.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.RemovedChangelogsIDs(); len(nodes) > 0 && !gpu.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpu.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, gpu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	gpu.mutation.done = true
	return n, nil
}

// GitProjectUpdateOne is the builder for updating a single GitProject entity.
type GitProjectUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GitProjectMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (gpuo *GitProjectUpdateOne) SetUpdatedAt(t time.Time) *GitProjectUpdateOne {
	gpuo.mutation.SetUpdatedAt(t)
	return gpuo
}

// SetDeletedAt sets the "deleted_at" field.
func (gpuo *GitProjectUpdateOne) SetDeletedAt(t time.Time) *GitProjectUpdateOne {
	gpuo.mutation.SetDeletedAt(t)
	return gpuo
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableDeletedAt(t *time.Time) *GitProjectUpdateOne {
	if t != nil {
		gpuo.SetDeletedAt(*t)
	}
	return gpuo
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (gpuo *GitProjectUpdateOne) ClearDeletedAt() *GitProjectUpdateOne {
	gpuo.mutation.ClearDeletedAt()
	return gpuo
}

// SetName sets the "name" field.
func (gpuo *GitProjectUpdateOne) SetName(s string) *GitProjectUpdateOne {
	gpuo.mutation.SetName(s)
	return gpuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableName(s *string) *GitProjectUpdateOne {
	if s != nil {
		gpuo.SetName(*s)
	}
	return gpuo
}

// SetDefaultBranch sets the "default_branch" field.
func (gpuo *GitProjectUpdateOne) SetDefaultBranch(s string) *GitProjectUpdateOne {
	gpuo.mutation.SetDefaultBranch(s)
	return gpuo
}

// SetNillableDefaultBranch sets the "default_branch" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableDefaultBranch(s *string) *GitProjectUpdateOne {
	if s != nil {
		gpuo.SetDefaultBranch(*s)
	}
	return gpuo
}

// SetGitProjectID sets the "git_project_id" field.
func (gpuo *GitProjectUpdateOne) SetGitProjectID(i int) *GitProjectUpdateOne {
	gpuo.mutation.ResetGitProjectID()
	gpuo.mutation.SetGitProjectID(i)
	return gpuo
}

// SetNillableGitProjectID sets the "git_project_id" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableGitProjectID(i *int) *GitProjectUpdateOne {
	if i != nil {
		gpuo.SetGitProjectID(*i)
	}
	return gpuo
}

// AddGitProjectID adds i to the "git_project_id" field.
func (gpuo *GitProjectUpdateOne) AddGitProjectID(i int) *GitProjectUpdateOne {
	gpuo.mutation.AddGitProjectID(i)
	return gpuo
}

// SetEnabled sets the "enabled" field.
func (gpuo *GitProjectUpdateOne) SetEnabled(b bool) *GitProjectUpdateOne {
	gpuo.mutation.SetEnabled(b)
	return gpuo
}

// SetNillableEnabled sets the "enabled" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableEnabled(b *bool) *GitProjectUpdateOne {
	if b != nil {
		gpuo.SetEnabled(*b)
	}
	return gpuo
}

// SetGlobalEnabled sets the "global_enabled" field.
func (gpuo *GitProjectUpdateOne) SetGlobalEnabled(b bool) *GitProjectUpdateOne {
	gpuo.mutation.SetGlobalEnabled(b)
	return gpuo
}

// SetNillableGlobalEnabled sets the "global_enabled" field if the given value is not nil.
func (gpuo *GitProjectUpdateOne) SetNillableGlobalEnabled(b *bool) *GitProjectUpdateOne {
	if b != nil {
		gpuo.SetGlobalEnabled(*b)
	}
	return gpuo
}

// SetGlobalConfig sets the "global_config" field.
func (gpuo *GitProjectUpdateOne) SetGlobalConfig(m *mars.Config) *GitProjectUpdateOne {
	gpuo.mutation.SetGlobalConfig(m)
	return gpuo
}

// ClearGlobalConfig clears the value of the "global_config" field.
func (gpuo *GitProjectUpdateOne) ClearGlobalConfig() *GitProjectUpdateOne {
	gpuo.mutation.ClearGlobalConfig()
	return gpuo
}

// AddChangelogIDs adds the "changelogs" edge to the Changelog entity by IDs.
func (gpuo *GitProjectUpdateOne) AddChangelogIDs(ids ...int) *GitProjectUpdateOne {
	gpuo.mutation.AddChangelogIDs(ids...)
	return gpuo
}

// AddChangelogs adds the "changelogs" edges to the Changelog entity.
func (gpuo *GitProjectUpdateOne) AddChangelogs(c ...*Changelog) *GitProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gpuo.AddChangelogIDs(ids...)
}

// Mutation returns the GitProjectMutation object of the builder.
func (gpuo *GitProjectUpdateOne) Mutation() *GitProjectMutation {
	return gpuo.mutation
}

// ClearChangelogs clears all "changelogs" edges to the Changelog entity.
func (gpuo *GitProjectUpdateOne) ClearChangelogs() *GitProjectUpdateOne {
	gpuo.mutation.ClearChangelogs()
	return gpuo
}

// RemoveChangelogIDs removes the "changelogs" edge to Changelog entities by IDs.
func (gpuo *GitProjectUpdateOne) RemoveChangelogIDs(ids ...int) *GitProjectUpdateOne {
	gpuo.mutation.RemoveChangelogIDs(ids...)
	return gpuo
}

// RemoveChangelogs removes "changelogs" edges to Changelog entities.
func (gpuo *GitProjectUpdateOne) RemoveChangelogs(c ...*Changelog) *GitProjectUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return gpuo.RemoveChangelogIDs(ids...)
}

// Where appends a list predicates to the GitProjectUpdate builder.
func (gpuo *GitProjectUpdateOne) Where(ps ...predicate.GitProject) *GitProjectUpdateOne {
	gpuo.mutation.Where(ps...)
	return gpuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (gpuo *GitProjectUpdateOne) Select(field string, fields ...string) *GitProjectUpdateOne {
	gpuo.fields = append([]string{field}, fields...)
	return gpuo
}

// Save executes the query and returns the updated GitProject entity.
func (gpuo *GitProjectUpdateOne) Save(ctx context.Context) (*GitProject, error) {
	if err := gpuo.defaults(); err != nil {
		return nil, err
	}
	return withHooks(ctx, gpuo.sqlSave, gpuo.mutation, gpuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (gpuo *GitProjectUpdateOne) SaveX(ctx context.Context) *GitProject {
	node, err := gpuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (gpuo *GitProjectUpdateOne) Exec(ctx context.Context) error {
	_, err := gpuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (gpuo *GitProjectUpdateOne) ExecX(ctx context.Context) {
	if err := gpuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (gpuo *GitProjectUpdateOne) defaults() error {
	if _, ok := gpuo.mutation.UpdatedAt(); !ok {
		if gitproject.UpdateDefaultUpdatedAt == nil {
			return fmt.Errorf("ent: uninitialized gitproject.UpdateDefaultUpdatedAt (forgotten import ent/runtime?)")
		}
		v := gitproject.UpdateDefaultUpdatedAt()
		gpuo.mutation.SetUpdatedAt(v)
	}
	return nil
}

// check runs all checks and user-defined validators on the builder.
func (gpuo *GitProjectUpdateOne) check() error {
	if v, ok := gpuo.mutation.Name(); ok {
		if err := gitproject.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "GitProject.name": %w`, err)}
		}
	}
	if v, ok := gpuo.mutation.DefaultBranch(); ok {
		if err := gitproject.DefaultBranchValidator(v); err != nil {
			return &ValidationError{Name: "default_branch", err: fmt.Errorf(`ent: validator failed for field "GitProject.default_branch": %w`, err)}
		}
	}
	if v, ok := gpuo.mutation.GlobalConfig(); ok {
		if err := v.Validate(); err != nil {
			return &ValidationError{Name: "global_config", err: fmt.Errorf(`ent: validator failed for field "GitProject.global_config": %w`, err)}
		}
	}
	return nil
}

func (gpuo *GitProjectUpdateOne) sqlSave(ctx context.Context) (_node *GitProject, err error) {
	if err := gpuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(gitproject.Table, gitproject.Columns, sqlgraph.NewFieldSpec(gitproject.FieldID, field.TypeInt))
	id, ok := gpuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "GitProject.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := gpuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, gitproject.FieldID)
		for _, f := range fields {
			if !gitproject.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != gitproject.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := gpuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := gpuo.mutation.UpdatedAt(); ok {
		_spec.SetField(gitproject.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := gpuo.mutation.DeletedAt(); ok {
		_spec.SetField(gitproject.FieldDeletedAt, field.TypeTime, value)
	}
	if gpuo.mutation.DeletedAtCleared() {
		_spec.ClearField(gitproject.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := gpuo.mutation.Name(); ok {
		_spec.SetField(gitproject.FieldName, field.TypeString, value)
	}
	if value, ok := gpuo.mutation.DefaultBranch(); ok {
		_spec.SetField(gitproject.FieldDefaultBranch, field.TypeString, value)
	}
	if value, ok := gpuo.mutation.GitProjectID(); ok {
		_spec.SetField(gitproject.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := gpuo.mutation.AddedGitProjectID(); ok {
		_spec.AddField(gitproject.FieldGitProjectID, field.TypeInt, value)
	}
	if value, ok := gpuo.mutation.Enabled(); ok {
		_spec.SetField(gitproject.FieldEnabled, field.TypeBool, value)
	}
	if value, ok := gpuo.mutation.GlobalEnabled(); ok {
		_spec.SetField(gitproject.FieldGlobalEnabled, field.TypeBool, value)
	}
	if value, ok := gpuo.mutation.GlobalConfig(); ok {
		_spec.SetField(gitproject.FieldGlobalConfig, field.TypeJSON, value)
	}
	if gpuo.mutation.GlobalConfigCleared() {
		_spec.ClearField(gitproject.FieldGlobalConfig, field.TypeJSON)
	}
	if gpuo.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.RemovedChangelogsIDs(); len(nodes) > 0 && !gpuo.mutation.ChangelogsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := gpuo.mutation.ChangelogsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   gitproject.ChangelogsTable,
			Columns: []string{gitproject.ChangelogsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(changelog.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &GitProject{config: gpuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, gpuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{gitproject.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	gpuo.mutation.done = true
	return _node, nil
}
