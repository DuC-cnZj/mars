// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v4/internal/repo (interfaces: ProjectRepo,GitRepo)
//
// Generated by this command:
//
//	mockgen -destination ./mock_repo.go -package repo github.com/duc-cnzj/mars/v4/internal/repo ProjectRepo,GitRepo
//

// Package repo is a generated GoMock package.
package repo

import (
	context "context"
	reflect "reflect"

	types "github.com/duc-cnzj/mars/api/v4/types"
	application "github.com/duc-cnzj/mars/v4/internal/application"
	pagination "github.com/duc-cnzj/mars/v4/internal/util/pagination"
	gomock "go.uber.org/mock/gomock"
	v1beta1 "k8s.io/metrics/pkg/apis/metrics/v1beta1"
)

// MockProjectRepo is a mock of ProjectRepo interface.
type MockProjectRepo struct {
	ctrl     *gomock.Controller
	recorder *MockProjectRepoMockRecorder
}

// MockProjectRepoMockRecorder is the mock recorder for MockProjectRepo.
type MockProjectRepoMockRecorder struct {
	mock *MockProjectRepo
}

// NewMockProjectRepo creates a new mock instance.
func NewMockProjectRepo(ctrl *gomock.Controller) *MockProjectRepo {
	mock := &MockProjectRepo{ctrl: ctrl}
	mock.recorder = &MockProjectRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectRepo) EXPECT() *MockProjectRepoMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockProjectRepo) Create(arg0 context.Context, arg1 *CreateProjectInput) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockProjectRepoMockRecorder) Create(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockProjectRepo)(nil).Create), arg0, arg1)
}

// Delete mocks base method.
func (m *MockProjectRepo) Delete(arg0 context.Context, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockProjectRepoMockRecorder) Delete(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockProjectRepo)(nil).Delete), arg0, arg1)
}

// FindByName mocks base method.
func (m *MockProjectRepo) FindByName(arg0 context.Context, arg1 string, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByName", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByName indicates an expected call of FindByName.
func (mr *MockProjectRepoMockRecorder) FindByName(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByName", reflect.TypeOf((*MockProjectRepo)(nil).FindByName), arg0, arg1, arg2)
}

// FindByVersion mocks base method.
func (m *MockProjectRepo) FindByVersion(arg0 context.Context, arg1, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByVersion indicates an expected call of FindByVersion.
func (mr *MockProjectRepoMockRecorder) FindByVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByVersion", reflect.TypeOf((*MockProjectRepo)(nil).FindByVersion), arg0, arg1, arg2)
}

// GetAllPodMetrics mocks base method.
func (m *MockProjectRepo) GetAllPodMetrics(arg0 *Project) []v1beta1.PodMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPodMetrics", arg0)
	ret0, _ := ret[0].([]v1beta1.PodMetrics)
	return ret0
}

// GetAllPodMetrics indicates an expected call of GetAllPodMetrics.
func (mr *MockProjectRepoMockRecorder) GetAllPodMetrics(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPodMetrics", reflect.TypeOf((*MockProjectRepo)(nil).GetAllPodMetrics), arg0)
}

// GetAllPods mocks base method.
func (m *MockProjectRepo) GetAllPods(arg0 *Project) SortStatePod {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPods", arg0)
	ret0, _ := ret[0].(SortStatePod)
	return ret0
}

// GetAllPods indicates an expected call of GetAllPods.
func (mr *MockProjectRepoMockRecorder) GetAllPods(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPods", reflect.TypeOf((*MockProjectRepo)(nil).GetAllPods), arg0)
}

// GetIngressMappingByProjects mocks base method.
func (m *MockProjectRepo) GetIngressMappingByProjects(arg0 string, arg1 ...*Project) EndpointMapping {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetIngressMappingByProjects", varargs...)
	ret0, _ := ret[0].(EndpointMapping)
	return ret0
}

// GetIngressMappingByProjects indicates an expected call of GetIngressMappingByProjects.
func (mr *MockProjectRepoMockRecorder) GetIngressMappingByProjects(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetIngressMappingByProjects", reflect.TypeOf((*MockProjectRepo)(nil).GetIngressMappingByProjects), varargs...)
}

// GetLoadBalancerMappingByProjects mocks base method.
func (m *MockProjectRepo) GetLoadBalancerMappingByProjects(arg0 string, arg1 ...*Project) EndpointMapping {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetLoadBalancerMappingByProjects", varargs...)
	ret0, _ := ret[0].(EndpointMapping)
	return ret0
}

// GetLoadBalancerMappingByProjects indicates an expected call of GetLoadBalancerMappingByProjects.
func (mr *MockProjectRepoMockRecorder) GetLoadBalancerMappingByProjects(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLoadBalancerMappingByProjects", reflect.TypeOf((*MockProjectRepo)(nil).GetLoadBalancerMappingByProjects), varargs...)
}

// GetNodePortMappingByProjects mocks base method.
func (m *MockProjectRepo) GetNodePortMappingByProjects(arg0 string, arg1 ...*Project) EndpointMapping {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetNodePortMappingByProjects", varargs...)
	ret0, _ := ret[0].(EndpointMapping)
	return ret0
}

// GetNodePortMappingByProjects indicates an expected call of GetNodePortMappingByProjects.
func (mr *MockProjectRepoMockRecorder) GetNodePortMappingByProjects(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNodePortMappingByProjects", reflect.TypeOf((*MockProjectRepo)(nil).GetNodePortMappingByProjects), varargs...)
}

// GetPreOccupiedLenByValuesYaml mocks base method.
func (m *MockProjectRepo) GetPreOccupiedLenByValuesYaml(arg0 string) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPreOccupiedLenByValuesYaml", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetPreOccupiedLenByValuesYaml indicates an expected call of GetPreOccupiedLenByValuesYaml.
func (mr *MockProjectRepoMockRecorder) GetPreOccupiedLenByValuesYaml(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPreOccupiedLenByValuesYaml", reflect.TypeOf((*MockProjectRepo)(nil).GetPreOccupiedLenByValuesYaml), arg0)
}

// List mocks base method.
func (m *MockProjectRepo) List(arg0 context.Context, arg1 *ListProjectInput) ([]*Project, *pagination.Pagination, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0, arg1)
	ret0, _ := ret[0].([]*Project)
	ret1, _ := ret[1].(*pagination.Pagination)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// List indicates an expected call of List.
func (mr *MockProjectRepoMockRecorder) List(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockProjectRepo)(nil).List), arg0, arg1)
}

// Show mocks base method.
func (m *MockProjectRepo) Show(arg0 context.Context, arg1 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Show", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Show indicates an expected call of Show.
func (mr *MockProjectRepoMockRecorder) Show(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Show", reflect.TypeOf((*MockProjectRepo)(nil).Show), arg0, arg1)
}

// UpdateDeployStatus mocks base method.
func (m *MockProjectRepo) UpdateDeployStatus(arg0 context.Context, arg1 int, arg2 types.Deploy) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateDeployStatus", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateDeployStatus indicates an expected call of UpdateDeployStatus.
func (mr *MockProjectRepoMockRecorder) UpdateDeployStatus(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateDeployStatus", reflect.TypeOf((*MockProjectRepo)(nil).UpdateDeployStatus), arg0, arg1, arg2)
}

// UpdateProject mocks base method.
func (m *MockProjectRepo) UpdateProject(arg0 context.Context, arg1 *UpdateProjectInput) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateProject", arg0, arg1)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateProject indicates an expected call of UpdateProject.
func (mr *MockProjectRepoMockRecorder) UpdateProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateProject", reflect.TypeOf((*MockProjectRepo)(nil).UpdateProject), arg0, arg1)
}

// UpdateStatusByVersion mocks base method.
func (m *MockProjectRepo) UpdateStatusByVersion(arg0 context.Context, arg1 int, arg2 types.Deploy, arg3 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatusByVersion", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStatusByVersion indicates an expected call of UpdateStatusByVersion.
func (mr *MockProjectRepoMockRecorder) UpdateStatusByVersion(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatusByVersion", reflect.TypeOf((*MockProjectRepo)(nil).UpdateStatusByVersion), arg0, arg1, arg2, arg3)
}

// UpdateVersion mocks base method.
func (m *MockProjectRepo) UpdateVersion(arg0 context.Context, arg1, arg2 int) (*Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateVersion", arg0, arg1, arg2)
	ret0, _ := ret[0].(*Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateVersion indicates an expected call of UpdateVersion.
func (mr *MockProjectRepoMockRecorder) UpdateVersion(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateVersion", reflect.TypeOf((*MockProjectRepo)(nil).UpdateVersion), arg0, arg1, arg2)
}

// MockGitRepo is a mock of GitRepo interface.
type MockGitRepo struct {
	ctrl     *gomock.Controller
	recorder *MockGitRepoMockRecorder
}

// MockGitRepoMockRecorder is the mock recorder for MockGitRepo.
type MockGitRepoMockRecorder struct {
	mock *MockGitRepo
}

// NewMockGitRepo creates a new mock instance.
func NewMockGitRepo(ctrl *gomock.Controller) *MockGitRepo {
	mock := &MockGitRepo{ctrl: ctrl}
	mock.recorder = &MockGitRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGitRepo) EXPECT() *MockGitRepoMockRecorder {
	return m.recorder
}

// AllBranches mocks base method.
func (m *MockGitRepo) AllBranches(arg0 context.Context, arg1 int) ([]*Branch, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllBranches", arg0, arg1)
	ret0, _ := ret[0].([]*Branch)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllBranches indicates an expected call of AllBranches.
func (mr *MockGitRepoMockRecorder) AllBranches(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllBranches", reflect.TypeOf((*MockGitRepo)(nil).AllBranches), arg0, arg1)
}

// AllProjects mocks base method.
func (m *MockGitRepo) AllProjects(arg0 context.Context) ([]*GitProject, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllProjects", arg0)
	ret0, _ := ret[0].([]*GitProject)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllProjects indicates an expected call of AllProjects.
func (mr *MockGitRepoMockRecorder) AllProjects(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllProjects", reflect.TypeOf((*MockGitRepo)(nil).AllProjects), arg0)
}

// GetByProjectID mocks base method.
func (m *MockGitRepo) GetByProjectID(arg0 context.Context, arg1 int) (application.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByProjectID", arg0, arg1)
	ret0, _ := ret[0].(application.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByProjectID indicates an expected call of GetByProjectID.
func (mr *MockGitRepoMockRecorder) GetByProjectID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByProjectID", reflect.TypeOf((*MockGitRepo)(nil).GetByProjectID), arg0, arg1)
}

// GetCommit mocks base method.
func (m *MockGitRepo) GetCommit(arg0 context.Context, arg1 int, arg2 string) (application.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommit", arg0, arg1, arg2)
	ret0, _ := ret[0].(application.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommit indicates an expected call of GetCommit.
func (mr *MockGitRepoMockRecorder) GetCommit(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommit", reflect.TypeOf((*MockGitRepo)(nil).GetCommit), arg0, arg1, arg2)
}

// GetCommitPipeline mocks base method.
func (m *MockGitRepo) GetCommitPipeline(arg0 context.Context, arg1 int, arg2, arg3 string) (application.Pipeline, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCommitPipeline", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(application.Pipeline)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCommitPipeline indicates an expected call of GetCommitPipeline.
func (mr *MockGitRepoMockRecorder) GetCommitPipeline(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCommitPipeline", reflect.TypeOf((*MockGitRepo)(nil).GetCommitPipeline), arg0, arg1, arg2, arg3)
}

// GetFileContentWithBranch mocks base method.
func (m *MockGitRepo) GetFileContentWithBranch(arg0 context.Context, arg1 int, arg2, arg3 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFileContentWithBranch", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFileContentWithBranch indicates an expected call of GetFileContentWithBranch.
func (mr *MockGitRepoMockRecorder) GetFileContentWithBranch(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFileContentWithBranch", reflect.TypeOf((*MockGitRepo)(nil).GetFileContentWithBranch), arg0, arg1, arg2, arg3)
}

// GetProject mocks base method.
func (m *MockGitRepo) GetProject(arg0 context.Context, arg1 int) (application.Project, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProject", arg0, arg1)
	ret0, _ := ret[0].(application.Project)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProject indicates an expected call of GetProject.
func (mr *MockGitRepoMockRecorder) GetProject(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProject", reflect.TypeOf((*MockGitRepo)(nil).GetProject), arg0, arg1)
}

// ListCommits mocks base method.
func (m *MockGitRepo) ListCommits(arg0 context.Context, arg1 int, arg2 string) ([]application.Commit, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListCommits", arg0, arg1, arg2)
	ret0, _ := ret[0].([]application.Commit)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListCommits indicates an expected call of ListCommits.
func (mr *MockGitRepoMockRecorder) ListCommits(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListCommits", reflect.TypeOf((*MockGitRepo)(nil).ListCommits), arg0, arg1, arg2)
}
