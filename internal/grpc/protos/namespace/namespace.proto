syntax = "proto3";

package namespace;

import "google/api/annotations.proto";
import "types/types.proto";
import "validate/validate.proto";

option go_package = "github.com/duc-cnzj/mars-client/v4/namespace;namespace";

message CreateRequest {
  string namespace = 1 [(validate.rules).string.min_bytes = 1];
  // 已存在则忽略，不会报错
  bool ignore_if_exists = 2;
}

message ShowRequest {
  int64 namespace_id = 1 [(validate.rules).int64.gt = 0];
}

message DeleteRequest {
  int64 namespace_id = 1 [(validate.rules).int64.gt = 0];
}

message IsExistsRequest {
  string name = 1 [(validate.rules).string.min_bytes = 1];
}

message AllResponse {
  repeated types.NamespaceModel items = 1;
}

message CreateResponse {
  types.NamespaceModel namespace = 1;
  bool exists = 2;
}

message ShowResponse {
  types.NamespaceModel namespace = 1;
}

message IsExistsResponse {
  bool exists = 1;
  int64 id = 2;
}
message AllRequest {}
message DeleteResponse {}

service Namespace {
  // All 获取所有的名称空间
  rpc All(AllRequest) returns (AllResponse) {
    option (google.api.http) = {
      get: "/api/namespaces"
    };
  }

  // Create 创建名称空间
  rpc Create(CreateRequest) returns (CreateResponse) {
    option (google.api.http) = {
      post: "/api/namespaces",
      body: "*"
    };
  }

  // Show 查看名称空间详情
  rpc Show(ShowRequest) returns (ShowResponse) {
    option (google.api.http) = {
      get: "/api/namespaces/{namespace_id}"
    };
  }

  // Delete 删除名称空间
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/namespaces/{namespace_id}"
    };
  }

  // IsExists 名称空间是否存在
  rpc IsExists(IsExistsRequest) returns (IsExistsResponse) {
    option (google.api.http) = {
      post: "/api/namespaces/exists"
    };
  }
}