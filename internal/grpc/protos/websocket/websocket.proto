syntax = "proto3";

package websocket;

import "cluster/cluster.proto";
import "types/types.proto";

option go_package = "github.com/duc-cnzj/mars-client/v4/websocket;websocket";

enum Type {
  TypeUnknown = 0;
  SetUid = 1;
  ReloadProjects = 2;
  CancelProject = 3;
  CreateProject = 4;
  UpdateProject = 5;
  ProcessPercent = 6;
  ClusterInfoSync = 7;
  InternalError = 8;
  ApplyProject = 9;
  ProjectPodEvent = 10;

  HandleExecShell = 50;
  HandleExecShellMsg = 51;
  HandleCloseShell = 52;
  HandleAuthorize = 53;
}

enum ResultType {
  ResultUnknown = 0;
  Error = 1;
  Success = 2;
  Deployed = 3;
  DeployedFailed = 4;
  DeployedCanceled = 5;
  LogWithContainers = 6;
}

enum To {
  ToSelf = 0;
  ToAll = 1;
  ToOthers = 2;
}

// Request
message WsRequestMetadata {
  Type type = 1;
}

message AuthorizeTokenInput {
  Type type = 1;

  string token = 2;
}

// TerminalMessage is the messaging protocol between ShellController and MyPtyHandler.
//
// OP      DIRECTION  FIELD(S) USED  DESCRIPTION
// ---------------------------------------------------------------------
// bind    fe->be     SessionID      ID sent back from TerminalResponse
// stdin   fe->be     Data           Keystrokes/paste buffer
// resize  fe->be     Rows, Cols     New terminal size
// stdout  be->fe     Data           Output from the process
// toast   be->fe     Data           OOB message to be shown to the user
message TerminalMessage {
  string op = 1;
  string data = 2;
  string session_id = 3;
  uint32 rows = 4;
  uint32 cols = 5;
}

message ProjectPodEventJoinInput {
  Type type = 1;

  bool join = 2;
  int64 project_id = 3;
  int64 namespace_id = 4;
}

message TerminalMessageInput {
  Type type = 1;

  TerminalMessage message = 2;
}

message WsHandleExecShellInput {
  Type type = 1;

  types.Container container = 2;
}

message CancelInput {
  Type type = 1;

  int64 namespace_id = 2;
  string name = 3;
}


message CreateProjectInput {
  Type type = 1;

  int64 namespace_id = 2;
  string name = 3;
  int64 git_project_id = 4;
  string git_branch = 5;
  string git_commit = 6;
  string config = 7;
  bool atomic = 8;
  repeated types.ExtraValue extra_values = 9;
}

message UpdateProjectInput {
  Type type = 1;

  int64 project_id = 2;
  string git_branch = 3;
  string git_commit = 4;
  string config = 5;
  bool atomic = 6;
  repeated types.ExtraValue extra_values = 7;
}

// Response
message Metadata {
  string id = 1;
  string uid = 2;
  string slug = 3;
  Type type = 4;
  bool end = 5;
  ResultType result = 6;
  To to = 7;
  string message = 8;
  int64 percent = 9;
}

message WsMetadataResponse {
  Metadata metadata = 1;
}

message WsHandleShellResponse {
  Metadata metadata = 1;

  TerminalMessage terminal_message = 2;
  types.Container container = 3;
}

message WsHandleClusterResponse {
  Metadata metadata = 1;

  cluster.InfoResponse info = 2;
}

// WsWithContainerMessageResponse 部署时容器起不来，需要查看带容器信息的日志时使用
message WsWithContainerMessageResponse {
  Metadata metadata = 1;

  repeated types.Container containers = 2;
}

message WsProjectPodEventResponse {
  Metadata metadata = 1;

  int64 project_id = 2;
}