syntax = "proto3";

package git;

import "google/api/annotations.proto";
import "validate/validate.proto";
import "mars/mars.proto";

option go_package = "github.com/duc-cnzj/mars-client/v4/git;git";

message EnableProjectRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
}

message DisableProjectRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
}

message ProjectItem {
  int64 id = 1;
  string name = 2;
  string path = 3;
  string web_url = 4;
  string avatar_url = 5;
  string description = 6;
  bool enabled = 7;
  bool global_enabled = 8;
}

message AllProjectsResponse {
  repeated ProjectItem items = 1;
}

message Option {
  string value = 1;
  string label = 2;
  string type = 3;
  // isLeaf 兼容 antd
  bool isLeaf = 4;
  string gitProjectId = 5;
  string branch = 6;
}

message ProjectOptionsResponse {
  repeated Option items = 1;
}

message BranchOptionsRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  bool all = 2;
}

message BranchOptionsResponse {
  repeated Option items = 1;
}

message CommitOptionsRequest {
  string git_project_id = 1;
  string branch = 2;
}

message CommitOptionsResponse {
  repeated Option items = 1;
}

message CommitRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch = 2 [(validate.rules).string.min_bytes = 1];
  string commit = 3 [(validate.rules).string.min_bytes = 1];
}

message CommitResponse {
  string id = 1;
  string short_id = 2;
  string git_project_id = 3;

  string label = 4;
  string title = 5;
  string branch = 6;
  string author_name = 7;
  string author_email = 8;
  string committer_name = 9;
  string committer_email = 10;
  string web_url = 11;
  string message = 12;

  string committed_date = 13;
  string created_at = 14;
}

message PipelineInfoRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch = 2 [(validate.rules).string.min_bytes = 1];
  string commit = 3 [(validate.rules).string.min_bytes = 1];
}

message PipelineInfoResponse {
  string status = 1;
  string web_url = 2;
}

message ConfigFileRequest {
  string git_project_id = 1 [(validate.rules).string.min_bytes = 1];
  string branch = 2 [(validate.rules).string.min_bytes = 1];
}

message ConfigFileResponse {
  string data = 1;
  string type = 2;
  repeated mars.Element elements = 3;
}

message EnableProjectResponse {}
message DisableProjectResponse {}
message AllProjectsRequest {}
message ProjectOptionsRequest {}

service Git {
  // EnableProject 开启项目，开启后可以在项目列表看到
  rpc EnableProject(EnableProjectRequest) returns (EnableProjectResponse) {
    option (google.api.http) = {
      post: "/api/git/projects/enable",
      body: "*"
    };
  }

  // DisableProject 关闭项目
  rpc DisableProject(DisableProjectRequest) returns (DisableProjectResponse) {
    option (google.api.http) = {
      post: "/api/git/projects/disable",
      body: "*"
    };
  }

  // All 获取所有的 git 项目
  rpc All(AllProjectsRequest) returns (AllProjectsResponse) {
    option (google.api.http) = {
      get: "/api/git/projects",
    };
  }

  // ProjectOptions 获取项目信息， 用在级联列表
  rpc ProjectOptions(ProjectOptionsRequest) returns (ProjectOptionsResponse) {
    option (google.api.http) = {
      get: "/api/git/project_options",
    };
  }

  // BranchOptions 获取分支信息， 用在级联列表
  rpc BranchOptions(BranchOptionsRequest) returns (BranchOptionsResponse) {
    option (google.api.http) = {
      get: "/api/git/projects/{git_project_id}/branch_options",
    };
  }

  // CommitOptions 获取commit信息， 用在级联列表
  rpc CommitOptions(CommitOptionsRequest) returns (CommitOptionsResponse) {
    option (google.api.http) = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commit_options",
    };
  }

  // Commit 获取 commit 详情
  rpc Commit(CommitRequest) returns (CommitResponse) {
    option (google.api.http) = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commits/{commit}",
    };
  }

  // PipelineInfo 获取 pipeline 详情
  rpc PipelineInfo(PipelineInfoRequest) returns (PipelineInfoResponse) {
    option (google.api.http) = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/commits/{commit}/pipeline_info",
    };
  }

  // MarsConfigFile 获取项目 mars 配置详情
  rpc MarsConfigFile(ConfigFileRequest) returns (ConfigFileResponse) {
    option (google.api.http) = {
      get: "/api/git/projects/{git_project_id}/branches/{branch}/config_file",
    };
  }
}
