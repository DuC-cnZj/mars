syntax = "proto3";

package project;

import "google/api/annotations.proto";
import "websocket/websocket.proto";
import "validate/validate.proto";
import "types/types.proto";
import "mars/mars.proto";

option go_package = "github.com/duc-cnzj/mars-client/v4/project;project";

message DeleteRequest {
  int64 project_id = 1 [(validate.rules).int64.gt = 0];
}

message ShowRequest {
  int64 project_id = 1 [(validate.rules).int64.gt = 0];
}

message ShowResponse {
  types.ProjectModel project = 1;

  repeated types.ServiceEndpoint urls = 13;
  string cpu = 15;
  string memory = 16;
  repeated mars.Element elements = 23;
}

message AllContainersRequest {
  int64 project_id = 1 [(validate.rules).int64.gt = 0];
}

message AllContainersResponse {
  repeated types.StateContainer items = 1;
}

message ApplyResponse {
  websocket.Metadata metadata = 1;
  types.ProjectModel project = 2;
}

message DryRunApplyResponse {
  repeated string results = 1;
}

// ApplyRequest same as ProjectInput
message ApplyRequest {
  int64 namespace_id = 1 [(validate.rules).int64.gt = 0];
  // name 不传就使用 git 默认的 name
  string name = 2;
  int64 git_project_id = 3 [(validate.rules).int64.gt = 0];
  string git_branch = 4 [(validate.rules).string.min_bytes = 1];
  //  git_commit 不传就用最新的 commit
  string git_commit = 5;
  string config = 6;
  bool atomic = 7;
  bool websocket_sync = 8;
  // 发送百分比
  bool send_percent = 11;
  repeated types.ExtraValue extra_values = 9;
  // 部署超时时间
  int64 install_timeout_seconds = 10 [(validate.rules).int64.gte = 0];
  // 版本号, dryRun 时可以不传
  int64 version = 12 [(validate.rules).int64.gte = 0];
}

message DeleteResponse {}

message ListRequest {
  int64 page = 1 [(validate.rules).int64.gt = 0];
  int64 page_size = 2 [(validate.rules).int64.gt = 0];
}

message ListResponse {
  int64 page = 1;
  int64 page_size = 2;
  int64 count = 3;
  repeated types.ProjectModel items = 4;
}

message HostVariablesRequest {
  // 如果不指定则使用从 git server 获取的项目名称
  string project_name = 1;
  string namespace = 2 [(validate.rules).string.min_bytes = 1];
  int64 git_project_id = 3 [(validate.rules).int64.gt = 0];
  string git_branch = 4 [(validate.rules).string.min_bytes = 1];
}

message HostVariablesResponse {
  map<string, string> hosts = 1;
}

service Project {
  //  List 获取项目列表
  rpc List(ListRequest) returns (ListResponse) {
    option (google.api.http) = {
      get: "/api/projects"
    };
  }

  // Apply grpc 创建/更新项目
  rpc Apply(ApplyRequest) returns (stream ApplyResponse);

  // ApplyDryRun 创建/更新项目 '--dry-run' mode
  rpc ApplyDryRun(ApplyRequest) returns (DryRunApplyResponse);

  // Show 项目详情
  rpc Show(ShowRequest) returns (ShowResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}"
    };
  }

  // Delete 删除项目
  rpc Delete(DeleteRequest) returns (DeleteResponse) {
    option (google.api.http) = {
      delete: "/api/projects/{project_id}"
    };
  }

  // AllContainers 获取项目下的所有 pod
  rpc AllContainers(AllContainersRequest) returns (AllContainersResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}/containers"
    };
  }

  // HostVariables 获取 hosts 变量
  rpc HostVariables(HostVariablesRequest) returns (HostVariablesResponse) {
    option (google.api.http) = {
      post: "/api/projects/host_variables",
      body: "*",
    };
  }
}