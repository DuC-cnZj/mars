syntax = "proto3";

import "google/api/annotations.proto";
import "websocket/websocket.proto";
import "model/model.proto";

option go_package = "github.com/duc-cnzj/mars/client/project;project";

message ProjectDeleteRequest {
  int64 project_id = 1;
}

message ProjectShowRequest {
  int64 project_id = 1;
}

message ProjectShowResponse {
  int64 id = 1;
  string name = 2;
  int64 gitlab_project_id = 3;
  string gitlab_branch = 4;
  string gitlab_commit = 5;
  string config = 6;
  string docker_image = 7;
  bool atomic = 8;
  string gitlab_commit_web_url = 9;
  string gitlab_commit_title = 10;
  string gitlab_commit_author = 11;
  string gitlab_commit_date = 12;

  repeated string urls = 13;
  message Namespace {
    int64 id = 1;
    string name = 2;
  }
  Namespace namespace = 14;
  string cpu = 15;
  string memory = 16;
  string override_values = 17;
  string created_at = 18;
  string updated_at = 19;
  string humanize_created_at = 20;
  string humanize_updated_at = 21;
}

message ProjectAllPodContainersRequest {
  int64 project_id = 1;
}

message ProjectPodLog {
  string namespace = 1;
  string pod_name = 2;
  string container_name = 3;
  string log = 4;
}

message ProjectAllPodContainersResponse {
  repeated ProjectPodLog data = 1;
}

message ProjectPodContainerLogRequest {
  int64 project_id = 1;
  string pod = 2;
  string container = 3;
}

message ProjectPodContainerLogResponse {
  ProjectPodLog data = 1;
}

message ProjectIsPodRunningRequest {
  string namespace = 1;
  string pod = 2;
}

message ProjectIsPodRunningResponse {
  bool running = 1;
  string reason = 2;
}

message ProjectApplyResponse {
  Metadata metadata = 1;
  ProjectModel project = 2;
}

// ProjectApplyRequest same as ProjectInput
message ProjectApplyRequest {
  int64 namespace_id = 1;
  string name = 2;
  int64 gitlab_project_id = 3;
  string gitlab_branch = 4;
  string gitlab_commit = 5;
  string config = 6;
  bool atomic = 7;
}

message ProjectDeleteResponse {}

service Project {
  rpc Apply(ProjectApplyRequest) returns (stream ProjectApplyResponse);

  rpc Delete(ProjectDeleteRequest) returns (ProjectDeleteResponse) {
    option (google.api.http) = {
      delete: "/api/projects/{project_id}"
    };
  }

  rpc Show(ProjectShowRequest) returns (ProjectShowResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}"
    };
  }

  rpc IsPodRunning(ProjectIsPodRunningRequest) returns (ProjectIsPodRunningResponse) {
    option (google.api.http) = {
      get: "/api/namespaces/{namespace}/pod/{pod}/status"
    };
  }

  rpc AllPodContainers(ProjectAllPodContainersRequest) returns (ProjectAllPodContainersResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}/containers"
    };
  }

  rpc PodContainerLog(ProjectPodContainerLogRequest) returns (ProjectPodContainerLogResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}/pods/{pod}/containers/{container}/logs"
    };
  }

  rpc StreamPodContainerLog(ProjectPodContainerLogRequest) returns (stream ProjectPodContainerLogResponse) {
    option (google.api.http) = {
      get: "/api/projects/{project_id}/pods/{pod}/containers/{container}/stream_logs"
    };
  }
}