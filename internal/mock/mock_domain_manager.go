// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/internal/plugins (interfaces: DomainManager)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDomainManager is a mock of DomainManager interface.
type MockDomainManager struct {
	ctrl     *gomock.Controller
	recorder *MockDomainManagerMockRecorder
}

// MockDomainManagerMockRecorder is the mock recorder for MockDomainManager.
type MockDomainManagerMockRecorder struct {
	mock *MockDomainManager
}

// NewMockDomainManager creates a new mock instance.
func NewMockDomainManager(ctrl *gomock.Controller) *MockDomainManager {
	mock := &MockDomainManager{ctrl: ctrl}
	mock.recorder = &MockDomainManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDomainManager) EXPECT() *MockDomainManagerMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockDomainManager) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockDomainManagerMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockDomainManager)(nil).Destroy))
}

// GetCertSecretName mocks base method.
func (m *MockDomainManager) GetCertSecretName(arg0 string, arg1 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCertSecretName", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetCertSecretName indicates an expected call of GetCertSecretName.
func (mr *MockDomainManagerMockRecorder) GetCertSecretName(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCertSecretName", reflect.TypeOf((*MockDomainManager)(nil).GetCertSecretName), arg0, arg1)
}

// GetCerts mocks base method.
func (m *MockDomainManager) GetCerts() (string, string, string) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCerts")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(string)
	return ret0, ret1, ret2
}

// GetCerts indicates an expected call of GetCerts.
func (mr *MockDomainManagerMockRecorder) GetCerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCerts", reflect.TypeOf((*MockDomainManager)(nil).GetCerts))
}

// GetClusterIssuer mocks base method.
func (m *MockDomainManager) GetClusterIssuer() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetClusterIssuer")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetClusterIssuer indicates an expected call of GetClusterIssuer.
func (mr *MockDomainManagerMockRecorder) GetClusterIssuer() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetClusterIssuer", reflect.TypeOf((*MockDomainManager)(nil).GetClusterIssuer))
}

// GetDomain mocks base method.
func (m *MockDomainManager) GetDomain(arg0, arg1 string, arg2 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomain", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDomain indicates an expected call of GetDomain.
func (mr *MockDomainManagerMockRecorder) GetDomain(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomain", reflect.TypeOf((*MockDomainManager)(nil).GetDomain), arg0, arg1, arg2)
}

// GetDomainByIndex mocks base method.
func (m *MockDomainManager) GetDomainByIndex(arg0, arg1 string, arg2, arg3 int) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDomainByIndex", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDomainByIndex indicates an expected call of GetDomainByIndex.
func (mr *MockDomainManagerMockRecorder) GetDomainByIndex(arg0, arg1, arg2, arg3 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDomainByIndex", reflect.TypeOf((*MockDomainManager)(nil).GetDomainByIndex), arg0, arg1, arg2, arg3)
}

// Initialize mocks base method.
func (m *MockDomainManager) Initialize(arg0 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDomainManagerMockRecorder) Initialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDomainManager)(nil).Initialize), arg0)
}

// Name mocks base method.
func (m *MockDomainManager) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockDomainManagerMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockDomainManager)(nil).Name))
}
