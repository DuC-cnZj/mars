// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v4/internal/contracts (interfaces: ProjectInterface)
//
// Generated by this command:
//
//	mockgen -destination ../mock/mock_git_server_project.go -package mock github.com/duc-cnzj/mars/v4/internal/contracts ProjectInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockProjectInterface is a mock of ProjectInterface interface.
type MockProjectInterface struct {
	ctrl     *gomock.Controller
	recorder *MockProjectInterfaceMockRecorder
}

// MockProjectInterfaceMockRecorder is the mock recorder for MockProjectInterface.
type MockProjectInterfaceMockRecorder struct {
	mock *MockProjectInterface
}

// NewMockProjectInterface creates a new mock instance.
func NewMockProjectInterface(ctrl *gomock.Controller) *MockProjectInterface {
	mock := &MockProjectInterface{ctrl: ctrl}
	mock.recorder = &MockProjectInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProjectInterface) EXPECT() *MockProjectInterfaceMockRecorder {
	return m.recorder
}

// GetAvatarURL mocks base method.
func (m *MockProjectInterface) GetAvatarURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAvatarURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetAvatarURL indicates an expected call of GetAvatarURL.
func (mr *MockProjectInterfaceMockRecorder) GetAvatarURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAvatarURL", reflect.TypeOf((*MockProjectInterface)(nil).GetAvatarURL))
}

// GetDefaultBranch mocks base method.
func (m *MockProjectInterface) GetDefaultBranch() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDefaultBranch")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDefaultBranch indicates an expected call of GetDefaultBranch.
func (mr *MockProjectInterfaceMockRecorder) GetDefaultBranch() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDefaultBranch", reflect.TypeOf((*MockProjectInterface)(nil).GetDefaultBranch))
}

// GetDescription mocks base method.
func (m *MockProjectInterface) GetDescription() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDescription")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetDescription indicates an expected call of GetDescription.
func (mr *MockProjectInterfaceMockRecorder) GetDescription() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDescription", reflect.TypeOf((*MockProjectInterface)(nil).GetDescription))
}

// GetID mocks base method.
func (m *MockProjectInterface) GetID() int64 {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetID")
	ret0, _ := ret[0].(int64)
	return ret0
}

// GetID indicates an expected call of GetID.
func (mr *MockProjectInterfaceMockRecorder) GetID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetID", reflect.TypeOf((*MockProjectInterface)(nil).GetID))
}

// GetName mocks base method.
func (m *MockProjectInterface) GetName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetName")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetName indicates an expected call of GetName.
func (mr *MockProjectInterfaceMockRecorder) GetName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetName", reflect.TypeOf((*MockProjectInterface)(nil).GetName))
}

// GetPath mocks base method.
func (m *MockProjectInterface) GetPath() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPath")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetPath indicates an expected call of GetPath.
func (mr *MockProjectInterfaceMockRecorder) GetPath() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPath", reflect.TypeOf((*MockProjectInterface)(nil).GetPath))
}

// GetWebURL mocks base method.
func (m *MockProjectInterface) GetWebURL() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWebURL")
	ret0, _ := ret[0].(string)
	return ret0
}

// GetWebURL indicates an expected call of GetWebURL.
func (mr *MockProjectInterfaceMockRecorder) GetWebURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWebURL", reflect.TypeOf((*MockProjectInterface)(nil).GetWebURL))
}
