// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v4/internal/contracts (interfaces: PluginInterface)
//
// Generated by this command:
//
//	mockgen -destination ../mock/mock_plugin.go -package mock github.com/duc-cnzj/mars/v4/internal/contracts PluginInterface
//

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockPluginInterface is a mock of PluginInterface interface.
type MockPluginInterface struct {
	ctrl     *gomock.Controller
	recorder *MockPluginInterfaceMockRecorder
}

// MockPluginInterfaceMockRecorder is the mock recorder for MockPluginInterface.
type MockPluginInterfaceMockRecorder struct {
	mock *MockPluginInterface
}

// NewMockPluginInterface creates a new mock instance.
func NewMockPluginInterface(ctrl *gomock.Controller) *MockPluginInterface {
	mock := &MockPluginInterface{ctrl: ctrl}
	mock.recorder = &MockPluginInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPluginInterface) EXPECT() *MockPluginInterfaceMockRecorder {
	return m.recorder
}

// Destroy mocks base method.
func (m *MockPluginInterface) Destroy() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

// Destroy indicates an expected call of Destroy.
func (mr *MockPluginInterfaceMockRecorder) Destroy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Destroy", reflect.TypeOf((*MockPluginInterface)(nil).Destroy))
}

// Initialize mocks base method.
func (m *MockPluginInterface) Initialize(arg0 map[string]any) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockPluginInterfaceMockRecorder) Initialize(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockPluginInterface)(nil).Initialize), arg0)
}

// Name mocks base method.
func (m *MockPluginInterface) Name() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

// Name indicates an expected call of Name.
func (mr *MockPluginInterfaceMockRecorder) Name() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Name", reflect.TypeOf((*MockPluginInterface)(nil).Name))
}
