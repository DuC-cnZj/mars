// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/v4/internal/contracts (interfaces: Uploader)

// Package mock is a generated GoMock package.
package mock

import (
	io "io"
	reflect "reflect"

	contracts "github.com/duc-cnzj/mars/v4/internal/contracts"
	gomock "github.com/golang/mock/gomock"
)

// MockUploader is a mock of Uploader interface.
type MockUploader struct {
	ctrl     *gomock.Controller
	recorder *MockUploaderMockRecorder
}

// MockUploaderMockRecorder is the mock recorder for MockUploader.
type MockUploaderMockRecorder struct {
	mock *MockUploader
}

// NewMockUploader creates a new mock instance.
func NewMockUploader(ctrl *gomock.Controller) *MockUploader {
	mock := &MockUploader{ctrl: ctrl}
	mock.recorder = &MockUploaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUploader) EXPECT() *MockUploaderMockRecorder {
	return m.recorder
}

// AbsolutePath mocks base method.
func (m *MockUploader) AbsolutePath(arg0 string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AbsolutePath", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// AbsolutePath indicates an expected call of AbsolutePath.
func (mr *MockUploaderMockRecorder) AbsolutePath(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AbsolutePath", reflect.TypeOf((*MockUploader)(nil).AbsolutePath), arg0)
}

// AllDirectoryFiles mocks base method.
func (m *MockUploader) AllDirectoryFiles(arg0 string) ([]contracts.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AllDirectoryFiles", arg0)
	ret0, _ := ret[0].([]contracts.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AllDirectoryFiles indicates an expected call of AllDirectoryFiles.
func (mr *MockUploaderMockRecorder) AllDirectoryFiles(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AllDirectoryFiles", reflect.TypeOf((*MockUploader)(nil).AllDirectoryFiles), arg0)
}

// Delete mocks base method.
func (m *MockUploader) Delete(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockUploaderMockRecorder) Delete(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockUploader)(nil).Delete), arg0)
}

// DeleteDir mocks base method.
func (m *MockUploader) DeleteDir(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteDir", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteDir indicates an expected call of DeleteDir.
func (mr *MockUploaderMockRecorder) DeleteDir(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteDir", reflect.TypeOf((*MockUploader)(nil).DeleteDir), arg0)
}

// DirSize mocks base method.
func (m *MockUploader) DirSize() (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DirSize")
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DirSize indicates an expected call of DirSize.
func (mr *MockUploaderMockRecorder) DirSize() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DirSize", reflect.TypeOf((*MockUploader)(nil).DirSize))
}

// Disk mocks base method.
func (m *MockUploader) Disk(arg0 string) contracts.Uploader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Disk", arg0)
	ret0, _ := ret[0].(contracts.Uploader)
	return ret0
}

// Disk indicates an expected call of Disk.
func (mr *MockUploaderMockRecorder) Disk(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Disk", reflect.TypeOf((*MockUploader)(nil).Disk), arg0)
}

// Exists mocks base method.
func (m *MockUploader) Exists(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// Exists indicates an expected call of Exists.
func (mr *MockUploaderMockRecorder) Exists(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockUploader)(nil).Exists), arg0)
}

// MkDir mocks base method.
func (m *MockUploader) MkDir(arg0 string, arg1 bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MkDir", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// MkDir indicates an expected call of MkDir.
func (mr *MockUploaderMockRecorder) MkDir(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MkDir", reflect.TypeOf((*MockUploader)(nil).MkDir), arg0, arg1)
}

// NewFile mocks base method.
func (m *MockUploader) NewFile(arg0 string) (contracts.File, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewFile", arg0)
	ret0, _ := ret[0].(contracts.File)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewFile indicates an expected call of NewFile.
func (mr *MockUploaderMockRecorder) NewFile(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewFile", reflect.TypeOf((*MockUploader)(nil).NewFile), arg0)
}

// Put mocks base method.
func (m *MockUploader) Put(arg0 string, arg1 io.Reader) (contracts.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Put", arg0, arg1)
	ret0, _ := ret[0].(contracts.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Put indicates an expected call of Put.
func (mr *MockUploaderMockRecorder) Put(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Put", reflect.TypeOf((*MockUploader)(nil).Put), arg0, arg1)
}

// Read mocks base method.
func (m *MockUploader) Read(arg0 string) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockUploaderMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockUploader)(nil).Read), arg0)
}

// RemoveEmptyDir mocks base method.
func (m *MockUploader) RemoveEmptyDir() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEmptyDir")
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEmptyDir indicates an expected call of RemoveEmptyDir.
func (mr *MockUploaderMockRecorder) RemoveEmptyDir() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEmptyDir", reflect.TypeOf((*MockUploader)(nil).RemoveEmptyDir))
}

// Stat mocks base method.
func (m *MockUploader) Stat(arg0 string) (contracts.FileInfo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Stat", arg0)
	ret0, _ := ret[0].(contracts.FileInfo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Stat indicates an expected call of Stat.
func (mr *MockUploaderMockRecorder) Stat(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stat", reflect.TypeOf((*MockUploader)(nil).Stat), arg0)
}

// Type mocks base method.
func (m *MockUploader) Type() contracts.UploadType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Type")
	ret0, _ := ret[0].(contracts.UploadType)
	return ret0
}

// Type indicates an expected call of Type.
func (mr *MockUploaderMockRecorder) Type() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Type", reflect.TypeOf((*MockUploader)(nil).Type))
}

// UnWrap mocks base method.
func (m *MockUploader) UnWrap() contracts.Uploader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnWrap")
	ret0, _ := ret[0].(contracts.Uploader)
	return ret0
}

// UnWrap indicates an expected call of UnWrap.
func (mr *MockUploaderMockRecorder) UnWrap() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnWrap", reflect.TypeOf((*MockUploader)(nil).UnWrap))
}
