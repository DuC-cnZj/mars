// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/internal/contracts (interfaces: Job)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	contracts "github.com/duc-cnzj/mars/internal/contracts"
	gomock "github.com/golang/mock/gomock"
)

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// Error mocks base method.
func (m *MockJob) Error() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Error")
	ret0, _ := ret[0].(error)
	return ret0
}

// Error indicates an expected call of Error.
func (mr *MockJobMockRecorder) Error() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockJob)(nil).Error))
}

// Finish mocks base method.
func (m *MockJob) Finish() contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Finish")
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// Finish indicates an expected call of Finish.
func (mr *MockJobMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockJob)(nil).Finish))
}

// GlobalLock mocks base method.
func (m *MockJob) GlobalLock() contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GlobalLock")
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// GlobalLock indicates an expected call of GlobalLock.
func (mr *MockJobMockRecorder) GlobalLock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GlobalLock", reflect.TypeOf((*MockJob)(nil).GlobalLock))
}

// ID mocks base method.
func (m *MockJob) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockJobMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockJob)(nil).ID))
}

// IsNotDryRun mocks base method.
func (m *MockJob) IsNotDryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNotDryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNotDryRun indicates an expected call of IsNotDryRun.
func (mr *MockJobMockRecorder) IsNotDryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNotDryRun", reflect.TypeOf((*MockJob)(nil).IsNotDryRun))
}

// LoadConfigs mocks base method.
func (m *MockJob) LoadConfigs() contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigs")
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// LoadConfigs indicates an expected call of LoadConfigs.
func (mr *MockJobMockRecorder) LoadConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigs", reflect.TypeOf((*MockJob)(nil).LoadConfigs))
}

// Manifests mocks base method.
func (m *MockJob) Manifests() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifests")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Manifests indicates an expected call of Manifests.
func (mr *MockJobMockRecorder) Manifests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifests", reflect.TypeOf((*MockJob)(nil).Manifests))
}

// OnError mocks base method.
func (m *MockJob) OnError(arg0 int, arg1 func(error, func())) contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnError", arg0, arg1)
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// OnError indicates an expected call of OnError.
func (mr *MockJobMockRecorder) OnError(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnError", reflect.TypeOf((*MockJob)(nil).OnError), arg0, arg1)
}

// OnFinally mocks base method.
func (m *MockJob) OnFinally(arg0 int, arg1 func(error, func())) contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnFinally", arg0, arg1)
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// OnFinally indicates an expected call of OnFinally.
func (mr *MockJobMockRecorder) OnFinally(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnFinally", reflect.TypeOf((*MockJob)(nil).OnFinally), arg0, arg1)
}

// OnSuccess mocks base method.
func (m *MockJob) OnSuccess(arg0 int, arg1 func(error, func())) contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OnSuccess", arg0, arg1)
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// OnSuccess indicates an expected call of OnSuccess.
func (mr *MockJobMockRecorder) OnSuccess(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnSuccess", reflect.TypeOf((*MockJob)(nil).OnSuccess), arg0, arg1)
}

// Run mocks base method.
func (m *MockJob) Run() contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockJobMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockJob)(nil).Run))
}

// Stop mocks base method.
func (m *MockJob) Stop(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockJobMockRecorder) Stop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJob)(nil).Stop), arg0)
}

// Validate mocks base method.
func (m *MockJob) Validate() contracts.Job {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(contracts.Job)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockJobMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockJob)(nil).Validate))
}
