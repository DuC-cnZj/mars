// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/internal/contracts (interfaces: Job)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	types "github.com/duc-cnzj/mars-client/v4/types"
	websocket "github.com/duc-cnzj/mars-client/v4/websocket"
	contracts "github.com/duc-cnzj/mars/internal/contracts"
	gomock "github.com/golang/mock/gomock"
)

// MockJob is a mock of Job interface.
type MockJob struct {
	ctrl     *gomock.Controller
	recorder *MockJobMockRecorder
}

// MockJobMockRecorder is the mock recorder for MockJob.
type MockJobMockRecorder struct {
	mock *MockJob
}

// NewMockJob creates a new mock instance.
func NewMockJob(ctrl *gomock.Controller) *MockJob {
	mock := &MockJob{ctrl: ctrl}
	mock.recorder = &MockJobMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockJob) EXPECT() *MockJobMockRecorder {
	return m.recorder
}

// AddDestroyFunc mocks base method.
func (m *MockJob) AddDestroyFunc(arg0 func()) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddDestroyFunc", arg0)
}

// AddDestroyFunc indicates an expected call of AddDestroyFunc.
func (mr *MockJobMockRecorder) AddDestroyFunc(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddDestroyFunc", reflect.TypeOf((*MockJob)(nil).AddDestroyFunc), arg0)
}

// CallDestroyFuncs mocks base method.
func (m *MockJob) CallDestroyFuncs() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "CallDestroyFuncs")
}

// CallDestroyFuncs indicates an expected call of CallDestroyFuncs.
func (mr *MockJobMockRecorder) CallDestroyFuncs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CallDestroyFuncs", reflect.TypeOf((*MockJob)(nil).CallDestroyFuncs))
}

// Commit mocks base method.
func (m *MockJob) Commit() contracts.CommitInterface {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Commit")
	ret0, _ := ret[0].(contracts.CommitInterface)
	return ret0
}

// Commit indicates an expected call of Commit.
func (mr *MockJobMockRecorder) Commit() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Commit", reflect.TypeOf((*MockJob)(nil).Commit))
}

// Done mocks base method.
func (m *MockJob) Done() <-chan struct{} {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Done")
	ret0, _ := ret[0].(<-chan struct{})
	return ret0
}

// Done indicates an expected call of Done.
func (mr *MockJobMockRecorder) Done() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Done", reflect.TypeOf((*MockJob)(nil).Done))
}

// Finish mocks base method.
func (m *MockJob) Finish() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Finish")
}

// Finish indicates an expected call of Finish.
func (mr *MockJobMockRecorder) Finish() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finish", reflect.TypeOf((*MockJob)(nil).Finish))
}

// GetStoppedErrorIfHas mocks base method.
func (m *MockJob) GetStoppedErrorIfHas() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStoppedErrorIfHas")
	ret0, _ := ret[0].(error)
	return ret0
}

// GetStoppedErrorIfHas indicates an expected call of GetStoppedErrorIfHas.
func (mr *MockJobMockRecorder) GetStoppedErrorIfHas() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStoppedErrorIfHas", reflect.TypeOf((*MockJob)(nil).GetStoppedErrorIfHas))
}

// HandleMessage mocks base method.
func (m *MockJob) HandleMessage() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "HandleMessage")
}

// HandleMessage indicates an expected call of HandleMessage.
func (mr *MockJobMockRecorder) HandleMessage() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HandleMessage", reflect.TypeOf((*MockJob)(nil).HandleMessage))
}

// ID mocks base method.
func (m *MockJob) ID() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(string)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockJobMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockJob)(nil).ID))
}

// IsDryRun mocks base method.
func (m *MockJob) IsDryRun() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsDryRun")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsDryRun indicates an expected call of IsDryRun.
func (mr *MockJobMockRecorder) IsDryRun() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsDryRun", reflect.TypeOf((*MockJob)(nil).IsDryRun))
}

// IsNew mocks base method.
func (m *MockJob) IsNew() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsNew")
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsNew indicates an expected call of IsNew.
func (mr *MockJobMockRecorder) IsNew() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsNew", reflect.TypeOf((*MockJob)(nil).IsNew))
}

// LoadConfigs mocks base method.
func (m *MockJob) LoadConfigs() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LoadConfigs")
	ret0, _ := ret[0].(error)
	return ret0
}

// LoadConfigs indicates an expected call of LoadConfigs.
func (mr *MockJobMockRecorder) LoadConfigs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LoadConfigs", reflect.TypeOf((*MockJob)(nil).LoadConfigs))
}

// Logs mocks base method.
func (m *MockJob) Logs() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Logs")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Logs indicates an expected call of Logs.
func (mr *MockJobMockRecorder) Logs() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Logs", reflect.TypeOf((*MockJob)(nil).Logs))
}

// Manifests mocks base method.
func (m *MockJob) Manifests() []string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Manifests")
	ret0, _ := ret[0].([]string)
	return ret0
}

// Manifests indicates an expected call of Manifests.
func (mr *MockJobMockRecorder) Manifests() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Manifests", reflect.TypeOf((*MockJob)(nil).Manifests))
}

// Messager mocks base method.
func (m *MockJob) Messager() contracts.DeployMsger {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Messager")
	ret0, _ := ret[0].(contracts.DeployMsger)
	return ret0
}

// Messager indicates an expected call of Messager.
func (mr *MockJobMockRecorder) Messager() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Messager", reflect.TypeOf((*MockJob)(nil).Messager))
}

// Owned mocks base method.
func (m *MockJob) Owned() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Owned")
	ret0, _ := ret[0].(bool)
	return ret0
}

// Owned indicates an expected call of Owned.
func (mr *MockJobMockRecorder) Owned() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Owned", reflect.TypeOf((*MockJob)(nil).Owned))
}

// Percenter mocks base method.
func (m *MockJob) Percenter() contracts.Percentable {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Percenter")
	ret0, _ := ret[0].(contracts.Percentable)
	return ret0
}

// Percenter indicates an expected call of Percenter.
func (mr *MockJobMockRecorder) Percenter() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Percenter", reflect.TypeOf((*MockJob)(nil).Percenter))
}

// ProjectModel mocks base method.
func (m *MockJob) ProjectModel() *types.ProjectModel {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProjectModel")
	ret0, _ := ret[0].(*types.ProjectModel)
	return ret0
}

// ProjectModel indicates an expected call of ProjectModel.
func (mr *MockJobMockRecorder) ProjectModel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProjectModel", reflect.TypeOf((*MockJob)(nil).ProjectModel))
}

// Prune mocks base method.
func (m *MockJob) Prune() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Prune")
}

// Prune indicates an expected call of Prune.
func (mr *MockJobMockRecorder) Prune() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Prune", reflect.TypeOf((*MockJob)(nil).Prune))
}

// PubSub mocks base method.
func (m *MockJob) PubSub() contracts.PubSub {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PubSub")
	ret0, _ := ret[0].(contracts.PubSub)
	return ret0
}

// PubSub indicates an expected call of PubSub.
func (mr *MockJobMockRecorder) PubSub() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PubSub", reflect.TypeOf((*MockJob)(nil).PubSub))
}

// ReleaseInstaller mocks base method.
func (m *MockJob) ReleaseInstaller() contracts.ReleaseInstaller {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReleaseInstaller")
	ret0, _ := ret[0].(contracts.ReleaseInstaller)
	return ret0
}

// ReleaseInstaller indicates an expected call of ReleaseInstaller.
func (mr *MockJobMockRecorder) ReleaseInstaller() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReleaseInstaller", reflect.TypeOf((*MockJob)(nil).ReleaseInstaller))
}

// Run mocks base method.
func (m *MockJob) Run() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run")
	ret0, _ := ret[0].(error)
	return ret0
}

// Run indicates an expected call of Run.
func (mr *MockJobMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockJob)(nil).Run))
}

// SetDeployResult mocks base method.
func (m *MockJob) SetDeployResult(arg0 websocket.ResultType, arg1 string, arg2 *types.ProjectModel) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetDeployResult", arg0, arg1, arg2)
}

// SetDeployResult indicates an expected call of SetDeployResult.
func (mr *MockJobMockRecorder) SetDeployResult(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeployResult", reflect.TypeOf((*MockJob)(nil).SetDeployResult), arg0, arg1, arg2)
}

// Stop mocks base method.
func (m *MockJob) Stop(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Stop", arg0)
}

// Stop indicates an expected call of Stop.
func (mr *MockJobMockRecorder) Stop(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Stop", reflect.TypeOf((*MockJob)(nil).Stop), arg0)
}

// User mocks base method.
func (m *MockJob) User() contracts.UserInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "User")
	ret0, _ := ret[0].(contracts.UserInfo)
	return ret0
}

// User indicates an expected call of User.
func (mr *MockJobMockRecorder) User() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "User", reflect.TypeOf((*MockJob)(nil).User))
}

// Validate mocks base method.
func (m *MockJob) Validate() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate")
	ret0, _ := ret[0].(error)
	return ret0
}

// Validate indicates an expected call of Validate.
func (mr *MockJobMockRecorder) Validate() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockJob)(nil).Validate))
}
