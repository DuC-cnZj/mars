// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/duc-cnzj/mars/internal/contracts (interfaces: PtyHandler)

// Package mock is a generated GoMock package.
package mock

import (
	reflect "reflect"

	websocket "github.com/duc-cnzj/mars-client/v4/websocket"
	gomock "github.com/golang/mock/gomock"
	remotecommand "k8s.io/client-go/tools/remotecommand"
)

// MockPtyHandler is a mock of PtyHandler interface.
type MockPtyHandler struct {
	ctrl     *gomock.Controller
	recorder *MockPtyHandlerMockRecorder
}

// MockPtyHandlerMockRecorder is the mock recorder for MockPtyHandler.
type MockPtyHandlerMockRecorder struct {
	mock *MockPtyHandler
}

// NewMockPtyHandler creates a new mock instance.
func NewMockPtyHandler(ctrl *gomock.Controller) *MockPtyHandler {
	mock := &MockPtyHandler{ctrl: ctrl}
	mock.recorder = &MockPtyHandlerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPtyHandler) EXPECT() *MockPtyHandlerMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockPtyHandler) Close(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close", arg0)
}

// Close indicates an expected call of Close.
func (mr *MockPtyHandlerMockRecorder) Close(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockPtyHandler)(nil).Close), arg0)
}

// Next mocks base method.
func (m *MockPtyHandler) Next() *remotecommand.TerminalSize {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Next")
	ret0, _ := ret[0].(*remotecommand.TerminalSize)
	return ret0
}

// Next indicates an expected call of Next.
func (mr *MockPtyHandlerMockRecorder) Next() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Next", reflect.TypeOf((*MockPtyHandler)(nil).Next))
}

// Read mocks base method.
func (m *MockPtyHandler) Read(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read.
func (mr *MockPtyHandlerMockRecorder) Read(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockPtyHandler)(nil).Read), arg0)
}

// SetShell mocks base method.
func (m *MockPtyHandler) SetShell(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "SetShell", arg0)
}

// SetShell indicates an expected call of SetShell.
func (mr *MockPtyHandlerMockRecorder) SetShell(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetShell", reflect.TypeOf((*MockPtyHandler)(nil).SetShell), arg0)
}

// TerminalMessageChan mocks base method.
func (m *MockPtyHandler) TerminalMessageChan() chan *websocket.TerminalMessage {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TerminalMessageChan")
	ret0, _ := ret[0].(chan *websocket.TerminalMessage)
	return ret0
}

// TerminalMessageChan indicates an expected call of TerminalMessageChan.
func (mr *MockPtyHandlerMockRecorder) TerminalMessageChan() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TerminalMessageChan", reflect.TypeOf((*MockPtyHandler)(nil).TerminalMessageChan))
}

// Toast mocks base method.
func (m *MockPtyHandler) Toast(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Toast", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Toast indicates an expected call of Toast.
func (mr *MockPtyHandlerMockRecorder) Toast(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Toast", reflect.TypeOf((*MockPtyHandler)(nil).Toast), arg0)
}

// Write mocks base method.
func (m *MockPtyHandler) Write(arg0 []byte) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Write", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Write indicates an expected call of Write.
func (mr *MockPtyHandlerMockRecorder) Write(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Write", reflect.TypeOf((*MockPtyHandler)(nil).Write), arg0)
}
