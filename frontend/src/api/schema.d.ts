/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/access_tokens": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AccessToken_List"];
    put?: never;
    post: operations["AccessToken_Grant"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/access_tokens/{token}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put: operations["AccessToken_Lease"];
    post?: never;
    delete: operations["AccessToken_Revoke"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/exchange": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Auth_Exchange"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Auth_Info"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Auth_Login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/settings": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Auth_Settings"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/cluster_info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Cluster_ClusterInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/containers/copy_to_pod": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Container_CopyToPod"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description ContainerLog 查看 pod 日志 */
    get: operations["Container_ContainerLog"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/containers/namespaces/{namespace}/pods/{pod}/containers/{container}/stream_logs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Container_StreamContainerLog"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/containers/pod_exists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Container_IsPodExists"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/containers/pod_running_status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Container_IsPodRunning"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/endpoints/namespaces/{namespaceId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Endpoint_InNamespace"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/endpoints/projects/{projectId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Endpoint_InProject"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/events": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Event_List"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/events/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Event_Show"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/files": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["File_List"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/files/disk_info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["File_DiskInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/files/max_upload_size": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["File_MaxUploadSize"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/files/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete: operations["File_Delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/project_options": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_ProjectOptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_All"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/disable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Git_DisableProject"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/enable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Git_EnableProject"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/branch_options": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_BranchOptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/branches/{branch}/commit_options": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_CommitOptions"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/branches/{branch}/commits/{commit}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_Commit"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/branches/{branch}/commits/{commit}/pipeline_info": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_PipelineInfo"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/branches/{branch}/config_file": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Git_MarsConfigFile"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/default_values": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["GitConfig_GetDefaultChartValues"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/global_config": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["GitConfig_GlobalConfig"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/mars_config": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["GitConfig_Show"];
    put: operations["GitConfig_Update"];
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/git/projects/{gitProjectId}/toggle_status": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["GitConfig_ToggleGlobalStatus"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/metrics/namespace/{namespaceId}/cpu_memory": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Metrics_CpuMemoryInNamespace"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/metrics/namespace/{namespace}/pods/{pod}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Metrics_TopPod"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/metrics/namespace/{namespace}/pods/{pod}/stream": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Metrics_StreamTopPod"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/metrics/projects/{projectId}/cpu_memory": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Metrics_CpuMemoryInProject"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/namespaces": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description All 获取所有的名称空间 */
    get: operations["Namespace_All"];
    put?: never;
    /** @description Create 创建名称空间 */
    post: operations["Namespace_Create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/namespaces/exists": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description IsExists 名称空间是否存在 */
    post: operations["Namespace_IsExists"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/namespaces/{namespaceId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Show 查看名称空间详情 */
    get: operations["Namespace_Show"];
    put?: never;
    post?: never;
    /** @description Delete 删除名称空间 */
    delete: operations["Namespace_Delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/picture/background": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Background 获取背景图片 */
    get: operations["Picture_Background"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description List 获取项目列表 */
    get: operations["Project_List"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects/host_variables": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** @description HostVariables 获取 hosts 变量 */
    post: operations["Project_HostVariables"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects/{projectId}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Show 项目详情 */
    get: operations["Project_Show"];
    put?: never;
    post?: never;
    /** @description Delete 删除项目 */
    delete: operations["Project_Delete"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects/{projectId}/changelogs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Changelog_Show"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects/{projectId}/containers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description AllContainers 获取项目下的所有 pod */
    get: operations["Project_AllContainers"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/projects/{projectId}/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Version 版本号, 如果不存在则返回 0 */
    get: operations["Project_Version"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/record_files/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["File_ShowRecords"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/repos": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Repo_List"];
    put?: never;
    post: operations["Repo_Create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/repos/toggle_enabled": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post: operations["Repo_ToggleEnabled"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/repos/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["Repo_Show"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Version 获取当前版本信息 */
    get: operations["Version_Version"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    "auth.ExchangeRequest": {
      code: string;
    };
    "auth.ExchangeResponse": {
      token: string;
      expiresIn: string;
    };
    "auth.InfoResponse": {
      /** Format: int32 */
      id: number;
      avatar: string;
      name: string;
      email: string;
      logoutUrl: string;
      roles: string[];
    };
    "auth.LoginRequest": {
      username: string;
      password: string;
    };
    "auth.LoginResponse": {
      token: string;
      expiresIn: string;
    };
    "auth.SettingsResponse": {
      items: components["schemas"]["auth.SettingsResponse_OidcSetting"][];
    };
    "auth.SettingsResponse_OidcSetting": {
      enabled: boolean;
      name: string;
      url: string;
      endSessionEndpoint: string;
      state: string;
    };
    "changelog.ShowResponse": {
      items: components["schemas"]["types.ChangelogModel"][];
    };
    "cluster.InfoResponse": {
      status: string;
      freeMemory: string;
      freeCpu: string;
      freeRequestMemory: string;
      freeRequestCpu: string;
      totalMemory: string;
      totalCpu: string;
      usageMemoryRate: string;
      usageCpuRate: string;
      requestMemoryRate: string;
      requestCpuRate: string;
    };
    "container.CopyToPodRequest": {
      fileId: string;
      namespace: string;
      pod: string;
      container: string;
    };
    "container.CopyToPodResponse": {
      podFilePath: string;
      output: string;
      fileName: string;
    };
    "container.IsPodExistsRequest": {
      namespace: string;
      pod: string;
    };
    "container.IsPodExistsResponse": {
      exists: boolean;
    };
    "container.IsPodRunningRequest": {
      namespace: string;
      pod: string;
    };
    "container.IsPodRunningResponse": {
      running: boolean;
      reason: string;
    };
    "container.LogResponse": {
      namespace: string;
      podName: string;
      containerName: string;
      log: string;
    };
    "endpoint.InNamespaceResponse": {
      items: components["schemas"]["types.ServiceEndpoint"][];
    };
    "endpoint.InProjectResponse": {
      items: components["schemas"]["types.ServiceEndpoint"][];
    };
    "event.ListResponse": {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      items: components["schemas"]["types.EventModel"][];
    };
    "event.ShowResponse": {
      event: components["schemas"]["types.EventModel"];
    };
    "file.DeleteResponse": Record<string, never>;
    "file.DiskInfoResponse": {
      usage: string;
      humanizeUsage: string;
    };
    "file.ListResponse": {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      items: components["schemas"]["types.FileModel"][];
      /** Format: int32 */
      count: number;
    };
    "file.MaxUploadSizeResponse": {
      humanizeSize: string;
      /** Format: uint32 */
      bytes: number;
    };
    "file.ShowRecordsResponse": {
      items: string[];
    };
    "git.AllResponse": {
      items: components["schemas"]["git.ProjectItem"][];
    };
    "git.BranchOptionsResponse": {
      items: components["schemas"]["git.Option"][];
    };
    "git.CommitOptionsResponse": {
      items: components["schemas"]["git.Option"][];
    };
    "git.CommitResponse": {
      id: string;
      shortId: string;
      gitProjectId: string;
      label: string;
      title: string;
      branch: string;
      authorName: string;
      authorEmail: string;
      committerName: string;
      committerEmail: string;
      webUrl: string;
      message: string;
      committedDate: string;
      createdAt: string;
    };
    "git.DisableProjectRequest": {
      gitProjectId: string;
    };
    "git.DisableProjectResponse": Record<string, never>;
    "git.EnableProjectRequest": {
      gitProjectId: string;
    };
    "git.EnableProjectResponse": Record<string, never>;
    "git.MarsConfigFileResponse": {
      data: string;
      type: string;
      elements: components["schemas"]["mars.Element"][];
    };
    "git.Option": {
      value: string;
      label: string;
      type: string;
      isLeaf: boolean;
      gitProjectId: string;
      branch: string;
      displayName: string;
    };
    "git.PipelineInfoResponse": {
      status: string;
      webUrl: string;
    };
    "git.ProjectItem": {
      /** Format: int32 */
      id: number;
      name: string;
      path: string;
      webUrl: string;
      avatarUrl: string;
      description: string;
      enabled: boolean;
      globalEnabled: boolean;
      displayName: string;
    };
    "git.ProjectOptionsResponse": {
      items: components["schemas"]["git.Option"][];
    };
    "gitconfig.DefaultChartValuesResponse": {
      value: string;
    };
    "gitconfig.GlobalConfigResponse": {
      enabled: boolean;
      config: components["schemas"]["mars.Config"];
    };
    "gitconfig.ShowResponse": {
      branch: string;
      config: components["schemas"]["mars.Config"];
    };
    "gitconfig.ToggleGlobalStatusRequest": {
      gitProjectId: string;
      enabled: boolean;
    };
    "gitconfig.ToggleGlobalStatusResponse": Record<string, never>;
    "gitconfig.UpdateRequest": {
      gitProjectId: string;
      config: components["schemas"]["mars.Config"];
    };
    "gitconfig.UpdateResponse": {
      config: components["schemas"]["mars.Config"];
    };
    "mars.Config": {
      /** @description config_file 指定项目下的默认配置文件, 也可以是别的项目的文件，格式为 "pid|branch|filename" */
      configFile: string;
      /** @description config_file_values 全局配置文件，如果没有 ConfigFile 则使用这个 */
      configFileValues: string;
      configField: string;
      isSimpleEnv: boolean;
      /** @description config_file_type 配置文件类型，php/env/yaml... */
      configFileType: string;
      /** @description local_chart_path helm charts 目录, charts 文件在项目中存放的目录(必填), 也可以是别的项目的文件，格式为 "pid|branch|path" */
      localChartPath: string;
      /** @description branches 启用的分支 */
      branches: string[];
      /** @description values_yaml 和 values.yaml 一样 */
      valuesYaml: string;
      /** @description elements 自定义字段 */
      elements: components["schemas"]["mars.Element"][];
      /** @description 显示的名称 (helm app name), 不填就使用 git server project name
       *      以字母开头结尾，中间可以有 '_' '-' */
      displayName: string;
    };
    "mars.Element": {
      path: string;
      /** Format: enum */
      type: number;
      default: string;
      description: string;
      selectValues: string[];
      /** Format: uint32 */
      order: number;
    };
    "metrics.CpuMemoryInNamespaceResponse": {
      cpu: string;
      memory: string;
    };
    "metrics.CpuMemoryInProjectResponse": {
      cpu: string;
      memory: string;
    };
    "metrics.TopPodResponse": {
      /** Format: double */
      cpu: number;
      /** Format: double */
      memory: number;
      humanizeCpu: string;
      humanizeMemory: string;
      time: string;
      /** Format: int32 */
      length: number;
    };
    "namespace.AllResponse": {
      items: components["schemas"]["types.NamespaceModel"][];
    };
    "namespace.CreateRequest": {
      namespace: string;
      /** @description 已存在则忽略，不会报错 */
      ignoreIfExists?: boolean;
    };
    "namespace.CreateResponse": {
      namespace: components["schemas"]["types.NamespaceModel"];
      exists: boolean;
    };
    "namespace.DeleteResponse": Record<string, never>;
    "namespace.IsExistsResponse": {
      exists: boolean;
      id: string;
    };
    "namespace.ShowResponse": {
      namespace: components["schemas"]["types.NamespaceModel"];
    };
    "picture.BackgroundResponse": {
      url: string;
      copyright: string;
    };
    "project.AllContainersResponse": {
      items: components["schemas"]["types.StateContainer"][];
    };
    "project.DeleteResponse": Record<string, never>;
    "project.HostVariablesRequest": {
      /** @description 如果不指定则使用从 git server 获取的项目名称 */
      projectName: string;
      namespace: string;
      /** Format: int32 */
      gitProjectId: number;
      gitBranch: string;
    };
    "project.HostVariablesResponse": {
      hosts: {
        [key: string]: string | undefined;
      };
    };
    "project.ListResponse": {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      count: number;
      items: components["schemas"]["types.ProjectModel"][];
    };
    "project.ShowResponse": {
      project: components["schemas"]["types.ProjectModel"];
      urls: components["schemas"]["types.ServiceEndpoint"][];
      cpu: string;
      memory: string;
      elements: components["schemas"]["mars.Element"][];
    };
    "project.VersionResponse": {
      /** Format: int32 */
      version: number;
    };
    "repo.CreateResponse": {
      item: components["schemas"]["types.RepoModel"];
    };
    "repo.ListResponse": {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      /** Format: int32 */
      count: number;
      items: components["schemas"]["types.RepoModel"][];
    };
    "repo.ShowResponse": {
      item: components["schemas"]["types.RepoModel"];
    };
    "repo.ToggleEnabledRequest": {
      /** Format: int32 */
      id: number;
      enabled: boolean;
    };
    "repo.ToggleEnabledResponse": {
      item: components["schemas"]["types.RepoModel"];
    };
    "token.GrantRequest": {
      /** Format: int32 */
      expireSeconds: number;
      usage: string;
    };
    "token.GrantResponse": {
      token: components["schemas"]["types.AccessTokenModel"];
    };
    "token.LeaseRequest": {
      token: string;
      /** Format: int32 */
      expireSeconds: number;
    };
    "token.LeaseResponse": {
      token: components["schemas"]["types.AccessTokenModel"];
    };
    "token.ListResponse": {
      /** Format: int32 */
      page: number;
      /** Format: int32 */
      pageSize: number;
      items: components["schemas"]["types.AccessTokenModel"][];
      /** Format: int32 */
      count: number;
    };
    "token.RevokeResponse": Record<string, never>;
    "types.AccessTokenModel": {
      token: string;
      email: string;
      expiredAt: string;
      usage: string;
      lastUsedAt: string;
      isDeleted: boolean;
      isExpired: boolean;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.ChangelogModel": {
      /** Format: int32 */
      id: number;
      /** Format: int32 */
      version: number;
      username: string;
      manifest: string[];
      config: string;
      configChanged: boolean;
      projectId: string;
      gitProjectId: string;
      project: components["schemas"]["types.ProjectModel"];
      gitProject: components["schemas"]["types.GitProjectModel"];
      date: string;
      configType: string;
      gitBranch: string;
      gitCommit: string;
      dockerImage: string;
      envValues: components["schemas"]["types.KeyValue"][];
      extraValues: components["schemas"]["types.ExtraValue"][];
      finalExtraValues: string[];
      gitCommitWebUrl: string;
      gitCommitTitle: string;
      gitCommitAuthor: string;
      gitCommitDate: string;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.EventModel": {
      /** Format: int32 */
      id: number;
      /** Format: enum */
      action: number;
      username: string;
      message: string;
      old: string;
      new: string;
      duration: string;
      /** Format: int32 */
      fileId: number;
      file: components["schemas"]["types.FileModel"];
      eventAt: string;
      hasDiff: boolean;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.ExtraValue": {
      path: string;
      value: string;
    };
    "types.FileModel": {
      /** Format: int32 */
      id: number;
      path: string;
      /** Format: int32 */
      size: number;
      username: string;
      namespace: string;
      pod: string;
      container: string;
      containerPath: string;
      humanizeSize: string;
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.GitProjectModel": {
      /** Format: int32 */
      id: number;
      defaultBranch: string;
      name: string;
      /** Format: int32 */
      gitProjectId: number;
      enabled: boolean;
      globalEnabled: boolean;
      globalConfig: components["schemas"]["mars.Config"];
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.ImagePullSecret": {
      name: string;
    };
    "types.KeyValue": {
      key: string;
      value: string;
    };
    "types.NamespaceModel": {
      /** Format: int32 */
      id: number;
      name: string;
      ImagePullSecrets: components["schemas"]["types.ImagePullSecret"][];
      projects: components["schemas"]["types.ProjectModel"][];
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.ProjectModel": {
      /** Format: int32 */
      id: number;
      name: string;
      /** Format: int32 */
      gitProjectId: number;
      gitBranch: string;
      gitCommit: string;
      config: string;
      overrideValues: string;
      dockerImage: string;
      podSelectors: string[];
      /** Format: int32 */
      namespaceId: number;
      atomic: boolean;
      envValues: components["schemas"]["types.KeyValue"][];
      extraValues: components["schemas"]["types.ExtraValue"][];
      finalExtraValues: string;
      /** Format: enum */
      deployStatus: number;
      humanizeCreatedAt: string;
      humanizeUpdatedAt: string;
      configType: string;
      gitCommitWebUrl: string;
      gitCommitTitle: string;
      gitCommitAuthor: string;
      gitCommitDate: string;
      /** Format: int32 */
      version: number;
      namespace: components["schemas"]["types.NamespaceModel"];
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.RepoModel": {
      /** Format: int32 */
      id: number;
      name: string;
      /** Format: int32 */
      gitProjectId: number;
      gitProjectName: string;
      enabled: boolean;
      marsConfig: components["schemas"]["mars.Config"];
      createdAt: string;
      updatedAt: string;
      deletedAt: string;
    };
    "types.ServiceEndpoint": {
      name: string;
      url: string;
      portName: string;
    };
    "types.StateContainer": {
      namespace: string;
      pod: string;
      container: string;
      /** @description 在滚动更新的时候会出现新旧 pod，is_old 用来标识旧的即将被删除的 pod */
      isOld: boolean;
      terminating: boolean;
      pending: boolean;
      ready: boolean;
    };
    "version.Response": {
      version: string;
      buildDate: string;
      gitBranch: string;
      gitCommit: string;
      gitTag: string;
      goVersion: string;
      compiler: string;
      platform: string;
      kubectlVersion: string;
      helmVersion: string;
      gitRepo: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AccessToken_List: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["token.ListResponse"];
        };
      };
    };
  };
  AccessToken_Grant: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["token.GrantRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["token.GrantResponse"];
        };
      };
    };
  };
  AccessToken_Lease: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        token: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["token.LeaseRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["token.LeaseResponse"];
        };
      };
    };
  };
  AccessToken_Revoke: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        token: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["token.RevokeResponse"];
        };
      };
    };
  };
  Auth_Exchange: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["auth.ExchangeRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth.ExchangeResponse"];
        };
      };
    };
  };
  Auth_Info: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth.InfoResponse"];
        };
      };
    };
  };
  Auth_Login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["auth.LoginRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth.LoginResponse"];
        };
      };
    };
  };
  Auth_Settings: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["auth.SettingsResponse"];
        };
      };
    };
  };
  Cluster_ClusterInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["cluster.InfoResponse"];
        };
      };
    };
  };
  Container_CopyToPod: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["container.CopyToPodRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["container.CopyToPodResponse"];
        };
      };
    };
  };
  Container_ContainerLog: {
    parameters: {
      query?: {
        showEvents?: boolean;
      };
      header?: never;
      path: {
        namespace: string;
        pod: string;
        container: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["container.LogResponse"];
        };
      };
    };
  };
  Container_StreamContainerLog: {
    parameters: {
      query?: {
        showEvents?: boolean;
      };
      header?: never;
      path: {
        namespace: string;
        pod: string;
        container: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["container.LogResponse"];
        };
      };
    };
  };
  Container_IsPodExists: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["container.IsPodExistsRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["container.IsPodExistsResponse"];
        };
      };
    };
  };
  Container_IsPodRunning: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["container.IsPodRunningRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["container.IsPodRunningResponse"];
        };
      };
    };
  };
  Endpoint_InNamespace: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespaceId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["endpoint.InNamespaceResponse"];
        };
      };
    };
  };
  Endpoint_InProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["endpoint.InProjectResponse"];
        };
      };
    };
  };
  Event_List: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
        actionType?: number;
        /** @description 模糊搜索 message 和 username */
        search?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["event.ListResponse"];
        };
      };
    };
  };
  Event_Show: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["event.ShowResponse"];
        };
      };
    };
  };
  File_List: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
        withoutDeleted?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["file.ListResponse"];
        };
      };
    };
  };
  File_DiskInfo: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["file.DiskInfoResponse"];
        };
      };
    };
  };
  File_MaxUploadSize: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["file.MaxUploadSizeResponse"];
        };
      };
    };
  };
  File_Delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["file.DeleteResponse"];
        };
      };
    };
  };
  Git_ProjectOptions: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.ProjectOptionsResponse"];
        };
      };
    };
  };
  Git_All: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.AllResponse"];
        };
      };
    };
  };
  Git_DisableProject: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["git.DisableProjectRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.DisableProjectResponse"];
        };
      };
    };
  };
  Git_EnableProject: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["git.EnableProjectRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.EnableProjectResponse"];
        };
      };
    };
  };
  Git_BranchOptions: {
    parameters: {
      query?: {
        all?: boolean;
      };
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.BranchOptionsResponse"];
        };
      };
    };
  };
  Git_CommitOptions: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
        branch: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.CommitOptionsResponse"];
        };
      };
    };
  };
  Git_Commit: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
        branch: string;
        commit: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.CommitResponse"];
        };
      };
    };
  };
  Git_PipelineInfo: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
        branch: string;
        commit: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.PipelineInfoResponse"];
        };
      };
    };
  };
  Git_MarsConfigFile: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
        branch: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["git.MarsConfigFileResponse"];
        };
      };
    };
  };
  GitConfig_GetDefaultChartValues: {
    parameters: {
      query?: {
        branch?: string;
      };
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["gitconfig.DefaultChartValuesResponse"];
        };
      };
    };
  };
  GitConfig_GlobalConfig: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["gitconfig.GlobalConfigResponse"];
        };
      };
    };
  };
  GitConfig_Show: {
    parameters: {
      query?: {
        branch?: string;
      };
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["gitconfig.ShowResponse"];
        };
      };
    };
  };
  GitConfig_Update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["gitconfig.UpdateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["gitconfig.UpdateResponse"];
        };
      };
    };
  };
  GitConfig_ToggleGlobalStatus: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        gitProjectId: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["gitconfig.ToggleGlobalStatusRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["gitconfig.ToggleGlobalStatusResponse"];
        };
      };
    };
  };
  Metrics_CpuMemoryInNamespace: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespaceId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["metrics.CpuMemoryInNamespaceResponse"];
        };
      };
    };
  };
  Metrics_TopPod: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespace: string;
        pod: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["metrics.TopPodResponse"];
        };
      };
    };
  };
  Metrics_StreamTopPod: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespace: string;
        pod: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["metrics.TopPodResponse"];
        };
      };
    };
  };
  Metrics_CpuMemoryInProject: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["metrics.CpuMemoryInProjectResponse"];
        };
      };
    };
  };
  Namespace_All: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["namespace.AllResponse"];
        };
      };
    };
  };
  Namespace_Create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["namespace.CreateRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["namespace.CreateResponse"];
        };
      };
    };
  };
  Namespace_IsExists: {
    parameters: {
      query?: {
        name?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["namespace.IsExistsResponse"];
        };
      };
    };
  };
  Namespace_Show: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespaceId: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["namespace.ShowResponse"];
        };
      };
    };
  };
  Namespace_Delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        namespaceId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["namespace.DeleteResponse"];
        };
      };
    };
  };
  Picture_Background: {
    parameters: {
      query?: {
        random?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["picture.BackgroundResponse"];
        };
      };
    };
  };
  Project_List: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.ListResponse"];
        };
      };
    };
  };
  Project_HostVariables: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["project.HostVariablesRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.HostVariablesResponse"];
        };
      };
    };
  };
  Project_Show: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.ShowResponse"];
        };
      };
    };
  };
  Project_Delete: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.DeleteResponse"];
        };
      };
    };
  };
  Changelog_Show: {
    parameters: {
      query?: {
        onlyChanged?: boolean;
      };
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["changelog.ShowResponse"];
        };
      };
    };
  };
  Project_AllContainers: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.AllContainersResponse"];
        };
      };
    };
  };
  Project_Version: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        projectId: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["project.VersionResponse"];
        };
      };
    };
  };
  File_ShowRecords: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["file.ShowRecordsResponse"];
        };
      };
    };
  };
  Repo_List: {
    parameters: {
      query?: {
        page?: number;
        pageSize?: number;
        enabled?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["repo.ListResponse"];
        };
      };
    };
  };
  Repo_Create: {
    parameters: {
      query?: {
        name?: string;
        gitProjectId?: number;
        enabled?: boolean;
        /** @description config_file 指定项目下的默认配置文件, 也可以是别的项目的文件，格式为 "pid|branch|filename" */
        "marsConfig.configFile"?: string;
        /** @description config_file_values 全局配置文件，如果没有 ConfigFile 则使用这个 */
        "marsConfig.configFileValues"?: string;
        "marsConfig.configField"?: string;
        "marsConfig.isSimpleEnv"?: boolean;
        /** @description config_file_type 配置文件类型，php/env/yaml... */
        "marsConfig.configFileType"?: string;
        /** @description local_chart_path helm charts 目录, charts 文件在项目中存放的目录(必填), 也可以是别的项目的文件，格式为 "pid|branch|path" */
        "marsConfig.localChartPath"?: string;
        /** @description branches 启用的分支 */
        "marsConfig.branches"?: string[];
        /** @description values_yaml 和 values.yaml 一样 */
        "marsConfig.valuesYaml"?: string;
        /** @description 显示的名称 (helm app name), 不填就使用 git server project name
         *      以字母开头结尾，中间可以有 '_' '-' */
        "marsConfig.displayName"?: string;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["repo.CreateResponse"];
        };
      };
    };
  };
  Repo_ToggleEnabled: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["repo.ToggleEnabledRequest"];
      };
    };
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["repo.ToggleEnabledResponse"];
        };
      };
    };
  };
  Repo_Show: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["repo.ShowResponse"];
        };
      };
    };
  };
  Version_Version: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description OK */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["version.Response"];
        };
      };
    };
  };
}
